[
    {
        "label": "Extension",
        "importPath": "jinja2.ext",
        "description": "jinja2.ext",
        "isExtraImport": true,
        "detail": "jinja2.ext",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "jinja2.ext",
        "description": "jinja2.ext",
        "isExtraImport": true,
        "detail": "jinja2.ext",
        "documentation": {}
    },
    {
        "label": "stringcase",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "stringcase",
        "description": "stringcase",
        "detail": "stringcase",
        "documentation": {}
    },
    {
        "label": "giturlparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "giturlparse",
        "description": "giturlparse",
        "detail": "giturlparse",
        "documentation": {}
    },
    {
        "label": "errno",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "errno",
        "description": "errno",
        "detail": "errno",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "listdir",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "cookiecutter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cookiecutter",
        "description": "cookiecutter",
        "detail": "cookiecutter",
        "documentation": {}
    },
    {
        "label": "read_user_yes_no",
        "importPath": "cookiecutter.prompt",
        "description": "cookiecutter.prompt",
        "isExtraImport": true,
        "detail": "cookiecutter.prompt",
        "documentation": {}
    },
    {
        "label": "FQDN",
        "importPath": "fqdn",
        "description": "fqdn",
        "isExtraImport": true,
        "detail": "fqdn",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "as_git_path",
        "importPath": "extensions.tg_filters",
        "description": "extensions.tg_filters",
        "isExtraImport": true,
        "detail": "extensions.tg_filters",
        "documentation": {}
    },
    {
        "label": "get_url_path",
        "importPath": "extensions.tg_filters",
        "description": "extensions.tg_filters",
        "isExtraImport": true,
        "detail": "extensions.tg_filters",
        "documentation": {}
    },
    {
        "label": "yaml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yaml",
        "description": "yaml",
        "detail": "yaml",
        "documentation": {}
    },
    {
        "label": "USER_CONFIG_PATH",
        "importPath": "cookiecutter.config",
        "description": "cookiecutter.config",
        "isExtraImport": true,
        "detail": "cookiecutter.config",
        "documentation": {}
    },
    {
        "label": "FailedHookException",
        "importPath": "cookiecutter.exceptions",
        "description": "cookiecutter.exceptions",
        "isExtraImport": true,
        "detail": "cookiecutter.exceptions",
        "documentation": {}
    },
    {
        "label": "EnvManager",
        "importPath": "poetry.utils.env",
        "description": "poetry.utils.env",
        "isExtraImport": true,
        "detail": "poetry.utils.env",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "token_obtain_pair",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "token_refresh",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "token_verify",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.contrib.postgres.fields.citext",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.postgres.fields.citext",
        "description": "django.contrib.postgres.fields.citext",
        "detail": "django.contrib.postgres.fields.citext",
        "documentation": {}
    },
    {
        "label": "CITextExtension",
        "importPath": "django.contrib.postgres.operations",
        "description": "django.contrib.postgres.operations",
        "isExtraImport": true,
        "detail": "django.contrib.postgres.operations",
        "documentation": {}
    },
    {
        "label": "ForgotPassword",
        "importPath": "tg_react.api.accounts.views",
        "description": "tg_react.api.accounts.views",
        "isExtraImport": true,
        "detail": "tg_react.api.accounts.views",
        "documentation": {}
    },
    {
        "label": "RestorePassword",
        "importPath": "tg_react.api.accounts.views",
        "description": "tg_react.api.accounts.views",
        "isExtraImport": true,
        "detail": "tg_react.api.accounts.views",
        "documentation": {}
    },
    {
        "label": "SignUpView",
        "importPath": "tg_react.api.accounts.views",
        "description": "tg_react.api.accounts.views",
        "isExtraImport": true,
        "detail": "tg_react.api.accounts.views",
        "documentation": {}
    },
    {
        "label": "UserDetails",
        "importPath": "tg_react.api.accounts.views",
        "description": "tg_react.api.accounts.views",
        "isExtraImport": true,
        "detail": "tg_react.api.accounts.views",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "accounts.rest",
        "description": "accounts.rest",
        "isExtraImport": true,
        "detail": "accounts.rest",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "api_settings",
        "importPath": "rest_framework.settings",
        "description": "rest_framework.settings",
        "isExtraImport": true,
        "detail": "rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairSerializer",
        "importPath": "rest_framework_simplejwt.serializers",
        "description": "rest_framework_simplejwt.serializers",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.serializers",
        "documentation": {}
    },
    {
        "label": "SignupSerializer",
        "importPath": "tg_react.api.accounts.serializers",
        "description": "tg_react.api.accounts.serializers",
        "isExtraImport": true,
        "detail": "tg_react.api.accounts.serializers",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "quote",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "override_settings",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "freeze_time",
        "importPath": "freezegun",
        "description": "freezegun",
        "isExtraImport": true,
        "detail": "freezegun",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "send_email",
        "importPath": "tg_utils.email",
        "description": "tg_utils.email",
        "isExtraImport": true,
        "detail": "tg_utils.email",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "AuthenticationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "default_token_generator",
        "importPath": "django.contrib.auth.tokens",
        "description": "django.contrib.auth.tokens",
        "isExtraImport": true,
        "detail": "django.contrib.auth.tokens",
        "documentation": {}
    },
    {
        "label": "force_bytes",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "urlsafe_base64_encode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "FormHelper",
        "importPath": "crispy_forms.helper",
        "description": "crispy_forms.helper",
        "isExtraImport": true,
        "detail": "crispy_forms.helper",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "Layout",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "Submit",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "send_password_reset",
        "importPath": "accounts.emails",
        "description": "accounts.emails",
        "isExtraImport": true,
        "detail": "accounts.emails",
        "documentation": {}
    },
    {
        "label": "AbstractBaseUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "PermissionsMixin",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "CIEmailField",
        "importPath": "django.contrib.postgres.fields",
        "description": "django.contrib.postgres.fields",
        "isExtraImport": true,
        "detail": "django.contrib.postgres.fields",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "importPath": "accounts.forms",
        "description": "accounts.forms",
        "isExtraImport": true,
        "detail": "accounts.forms",
        "documentation": {}
    },
    {
        "label": "PasswordResetForm",
        "importPath": "accounts.forms",
        "description": "accounts.forms",
        "isExtraImport": true,
        "detail": "accounts.forms",
        "documentation": {}
    },
    {
        "label": "SetPasswordForm",
        "importPath": "accounts.forms",
        "description": "accounts.forms",
        "isExtraImport": true,
        "detail": "accounts.forms",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "importPath": "accounts.forms",
        "description": "accounts.forms",
        "isExtraImport": true,
        "detail": "accounts.forms",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "importPath": "django.contrib.auth.views",
        "description": "django.contrib.auth.views",
        "isExtraImport": true,
        "detail": "django.contrib.auth.views",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "environs",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "environs",
        "description": "environs",
        "detail": "environs",
        "documentation": {}
    },
    {
        "label": "crontab",
        "importPath": "celery.schedules",
        "description": "celery.schedules",
        "isExtraImport": true,
        "detail": "celery.schedules",
        "documentation": {}
    },
    {
        "label": "default_headers",
        "importPath": "corsheaders.defaults",
        "description": "corsheaders.defaults",
        "isExtraImport": true,
        "detail": "corsheaders.defaults",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "settings.base",
        "description": "settings.base",
        "isExtraImport": true,
        "detail": "settings.base",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "settings.base",
        "description": "settings.base",
        "isExtraImport": true,
        "detail": "settings.base",
        "documentation": {}
    },
    {
        "label": "service_account",
        "importPath": "google.oauth2",
        "description": "google.oauth2",
        "isExtraImport": true,
        "detail": "google.oauth2",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "settings.local",
        "description": "settings.local",
        "isExtraImport": true,
        "detail": "settings.local",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "call_command",
        "importPath": "django.core.management",
        "description": "django.core.management",
        "isExtraImport": true,
        "detail": "django.core.management",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "django.core.cache",
        "description": "django.core.cache",
        "isExtraImport": true,
        "detail": "django.core.cache",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "django.utils.datetime_safe",
        "description": "django.utils.datetime_safe",
        "isExtraImport": true,
        "detail": "django.utils.datetime_safe",
        "documentation": {}
    },
    {
        "label": "MockerFixture",
        "importPath": "pytest_mock",
        "description": "pytest_mock",
        "isExtraImport": true,
        "detail": "pytest_mock",
        "documentation": {}
    },
    {
        "label": "CACHE_KEY",
        "importPath": "tg_utils.health_check.checks.celery_beat.backends",
        "description": "tg_utils.health_check.checks.celery_beat.backends",
        "isExtraImport": true,
        "detail": "tg_utils.health_check.checks.celery_beat.backends",
        "documentation": {}
    },
    {
        "label": "TIMEOUT",
        "importPath": "tg_utils.health_check.checks.celery_beat.backends",
        "description": "tg_utils.health_check.checks.celery_beat.backends",
        "isExtraImport": true,
        "detail": "tg_utils.health_check.checks.celery_beat.backends",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "checks",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "check_production_settings",
        "importPath": "tg_utils.checks",
        "description": "tg_utils.checks",
        "isExtraImport": true,
        "detail": "tg_utils.checks",
        "documentation": {}
    },
    {
        "label": "check_sentry_config",
        "importPath": "tg_utils.checks",
        "description": "tg_utils.checks",
        "isExtraImport": true,
        "detail": "tg_utils.checks",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Celery",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "S3Boto3Storage",
        "importPath": "storages.backends.s3boto3",
        "description": "storages.backends.s3boto3",
        "isExtraImport": true,
        "detail": "storages.backends.s3boto3",
        "documentation": {}
    },
    {
        "label": "GoogleCloudStorage",
        "importPath": "storages.backends.gcloud",
        "description": "storages.backends.gcloud",
        "isExtraImport": true,
        "detail": "storages.backends.gcloud",
        "documentation": {}
    },
    {
        "label": "clearsessions",
        "importPath": "django.contrib.sessions.management.commands",
        "description": "django.contrib.sessions.management.commands",
        "isExtraImport": true,
        "detail": "django.contrib.sessions.management.commands",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "{{cookiecutter.repo_name}}.celery",
        "description": "{{cookiecutter.repo_name}}.celery",
        "isExtraImport": true,
        "detail": "{{cookiecutter.repo_name}}.celery",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic.base",
        "description": "django.views.generic.base",
        "isExtraImport": true,
        "detail": "django.views.generic.base",
        "documentation": {}
    },
    {
        "label": "RedirectView",
        "importPath": "django.views.generic.base",
        "description": "django.views.generic.base",
        "isExtraImport": true,
        "detail": "django.views.generic.base",
        "documentation": {}
    },
    {
        "label": "JavaScriptCatalog",
        "importPath": "django.views.i18n",
        "description": "django.views.i18n",
        "isExtraImport": true,
        "detail": "django.views.i18n",
        "documentation": {}
    },
    {
        "label": "HealthCheckViewMinimal",
        "importPath": "tg_utils.health_check.views",
        "description": "tg_utils.health_check.views",
        "isExtraImport": true,
        "detail": "tg_utils.health_check.views",
        "documentation": {}
    },
    {
        "label": "HealthCheckViewProtected",
        "importPath": "tg_utils.health_check.views",
        "description": "tg_utils.health_check.views",
        "isExtraImport": true,
        "detail": "tg_utils.health_check.views",
        "documentation": {}
    },
    {
        "label": "HttpResponseNotFound",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseServerError",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "TemplateDoesNotExist",
        "importPath": "django.template",
        "description": "django.template",
        "isExtraImport": true,
        "detail": "django.template",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "requires_csrf_token",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "last_event_id",
        "importPath": "sentry_sdk",
        "description": "sentry_sdk",
        "isExtraImport": true,
        "detail": "sentry_sdk",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "baker",
        "importPath": "model_bakery",
        "description": "model_bakery",
        "isExtraImport": true,
        "detail": "model_bakery",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "join",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "exists",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "isdir",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "abspath",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "basename",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "docker",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "docker",
        "description": "docker",
        "detail": "docker",
        "documentation": {}
    },
    {
        "label": "generate_files",
        "importPath": "cookiecutter.generate",
        "description": "cookiecutter.generate",
        "isExtraImport": true,
        "detail": "cookiecutter.generate",
        "documentation": {}
    },
    {
        "label": "prompt_for_config",
        "importPath": "cookiecutter.main",
        "description": "cookiecutter.main",
        "isExtraImport": true,
        "detail": "cookiecutter.main",
        "documentation": {}
    },
    {
        "label": "generate_context",
        "importPath": "cookiecutter.main",
        "description": "cookiecutter.main",
        "isExtraImport": true,
        "detail": "cookiecutter.main",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "TGDockerImageModule",
        "kind": 6,
        "importPath": "extensions.tg_dockerimage_lookup",
        "description": "extensions.tg_dockerimage_lookup",
        "peekOfCode": "class TGDockerImageModule(Extension):\n    def __init__(self, environment):\n        super().__init__(environment)\n        environment.globals['python_image'] = python_image",
        "detail": "extensions.tg_dockerimage_lookup",
        "documentation": {}
    },
    {
        "label": "python_image",
        "kind": 2,
        "importPath": "extensions.tg_dockerimage_lookup",
        "description": "extensions.tg_dockerimage_lookup",
        "peekOfCode": "def python_image(value, base_image):\n    try:\n        return IMAGE_LOOKUP[value]\n    except KeyError:\n        return DOCKER_BASE_IMAGE_PATTERN[base_image].format(version=value)\nclass TGDockerImageModule(Extension):\n    def __init__(self, environment):\n        super().__init__(environment)\n        environment.globals['python_image'] = python_image",
        "detail": "extensions.tg_dockerimage_lookup",
        "documentation": {}
    },
    {
        "label": "DOCKER_BASE_IMAGE_PATTERN",
        "kind": 5,
        "importPath": "extensions.tg_dockerimage_lookup",
        "description": "extensions.tg_dockerimage_lookup",
        "peekOfCode": "DOCKER_BASE_IMAGE_PATTERN = {\n    'alpine': 'python:{version}-alpine',\n    'debian': 'python:{version}-slim-buster',\n}\nIMAGE_LOOKUP = {\n    # Specific image tags that do not fall into the patterns above, e.g.:\n    # '3.6': 'python:3.6-my-awesome-version',\n}\ndef python_image(value, base_image):\n    try:",
        "detail": "extensions.tg_dockerimage_lookup",
        "documentation": {}
    },
    {
        "label": "IMAGE_LOOKUP",
        "kind": 5,
        "importPath": "extensions.tg_dockerimage_lookup",
        "description": "extensions.tg_dockerimage_lookup",
        "peekOfCode": "IMAGE_LOOKUP = {\n    # Specific image tags that do not fall into the patterns above, e.g.:\n    # '3.6': 'python:3.6-my-awesome-version',\n}\ndef python_image(value, base_image):\n    try:\n        return IMAGE_LOOKUP[value]\n    except KeyError:\n        return DOCKER_BASE_IMAGE_PATTERN[base_image].format(version=value)\nclass TGDockerImageModule(Extension):",
        "detail": "extensions.tg_dockerimage_lookup",
        "documentation": {}
    },
    {
        "label": "TGFiltersModule",
        "kind": 6,
        "importPath": "extensions.tg_filters",
        "description": "extensions.tg_filters",
        "peekOfCode": "class TGFiltersModule(Extension):\n    def __init__(self, environment):\n        super().__init__(environment)\n        environment.filters[\"as_hostname\"] = as_hostname\n        environment.filters[\"snake_to_pascal_case\"] = snake_to_pascal_case\n        environment.filters[\"as_git_path\"] = as_git_path\n        environment.filters[\"get_url_path\"] = get_url_path\n        environment.globals.update(\n            SPA=\"spa\",\n            WEBAPP=\"webapp\",",
        "detail": "extensions.tg_filters",
        "documentation": {}
    },
    {
        "label": "as_hostname",
        "kind": 2,
        "importPath": "extensions.tg_filters",
        "description": "extensions.tg_filters",
        "peekOfCode": "def as_hostname(value):\n    # Replace underscores with dash - to allow using the value as a hostname\n    return value.replace(\"_\", \"-\")\ndef snake_to_pascal_case(value):\n    return stringcase.pascalcase(value)\ndef as_git_path(value):\n    if not value or not value.strip():\n        return value\n    res = value.strip()\n    # value is already a git ssh url. Return it as is",
        "detail": "extensions.tg_filters",
        "documentation": {}
    },
    {
        "label": "snake_to_pascal_case",
        "kind": 2,
        "importPath": "extensions.tg_filters",
        "description": "extensions.tg_filters",
        "peekOfCode": "def snake_to_pascal_case(value):\n    return stringcase.pascalcase(value)\ndef as_git_path(value):\n    if not value or not value.strip():\n        return value\n    res = value.strip()\n    # value is already a git ssh url. Return it as is\n    if value.startswith(\"git@\"):\n        return value\n    res = res.replace(\"http://\", \"\")",
        "detail": "extensions.tg_filters",
        "documentation": {}
    },
    {
        "label": "as_git_path",
        "kind": 2,
        "importPath": "extensions.tg_filters",
        "description": "extensions.tg_filters",
        "peekOfCode": "def as_git_path(value):\n    if not value or not value.strip():\n        return value\n    res = value.strip()\n    # value is already a git ssh url. Return it as is\n    if value.startswith(\"git@\"):\n        return value\n    res = res.replace(\"http://\", \"\")\n    res = res.replace(\"https://\", \"\")\n    # Strip .git suffix from a git http/https url",
        "detail": "extensions.tg_filters",
        "documentation": {}
    },
    {
        "label": "get_url_path",
        "kind": 2,
        "importPath": "extensions.tg_filters",
        "description": "extensions.tg_filters",
        "peekOfCode": "def get_url_path(value):\n    \"\"\"Takes a gitlab repository url and returns its path component\n    Example:\n    >>> get_url_path(\"https://gitlab.com/thorgate-public/django-project-template\")\n    >>> \"thorgate-public/django-project-template\"\n    \"\"\"\n    if not value or not value.strip():\n        return value\n    res = value.strip()\n    if res.startswith(\"git@\") or res.endswith(\".git\"):",
        "detail": "extensions.tg_filters",
        "documentation": {}
    },
    {
        "label": "EncryptionPrompt",
        "kind": 6,
        "importPath": "hooks.post_gen_project",
        "description": "hooks.post_gen_project",
        "peekOfCode": "class EncryptionPrompt(Enum):\n    ENCRYPTED = 1\n    EXCLUDED = 2\ndef cleanup():\n    cwd = os.getcwd()\n    print('cleanup paths in %s' % cwd)\n    cleanup_paths = []\n    rename_paths: List[Tuple[str, str]] = []  # Tuples of old -> new path\n    symlinks = []\n    dockerfiles = [",
        "detail": "hooks.post_gen_project",
        "documentation": {}
    },
    {
        "label": "cleanup",
        "kind": 2,
        "importPath": "hooks.post_gen_project",
        "description": "hooks.post_gen_project",
        "peekOfCode": "def cleanup():\n    cwd = os.getcwd()\n    print('cleanup paths in %s' % cwd)\n    cleanup_paths = []\n    rename_paths: List[Tuple[str, str]] = []  # Tuples of old -> new path\n    symlinks = []\n    dockerfiles = [\n        'Dockerfile-django',\n        'Dockerfile-django.production',\n        'Dockerfile-node',",
        "detail": "hooks.post_gen_project",
        "documentation": {}
    },
    {
        "label": "kill_lines",
        "kind": 2,
        "importPath": "hooks.post_gen_project",
        "description": "hooks.post_gen_project",
        "peekOfCode": "def kill_lines(path):\n    \"\"\"\n    Will run sed on all files in path and remove leftovers from commented out cookie cutter code ` # - ` or ` // - `\n    \"\"\"\n    re = '^\\s*(#|//) -\\s*$'\n    for escape in \"()/|\":\n        re = re.replace(escape, fr\"\\{escape}\")\n    sed_command = f\"/{re}/d\"\n    print(f\"removing kill lines | {sed_command} | @ { path }\")\n    return subprocess.check_call([\"find\", path, \"-type\", \"f\", \"-exec\", \"sed\", \"-i\", sed_command, \"{}\", \"+\"])",
        "detail": "hooks.post_gen_project",
        "documentation": {}
    },
    {
        "label": "run_lint_fix",
        "kind": 2,
        "importPath": "hooks.post_gen_project",
        "description": "hooks.post_gen_project",
        "peekOfCode": "def run_lint_fix(path):\n    print(\"Running black\")\n    subprocess.check_call([\"black\", path])\n    #  isort has issues.\n    #  Getting different results depending for local ipython isort,  make isort, in posthook.\n    # print(\"Running isort\")\n    # print(subprocess.check_output([\"isort\", cwd, \"-p\", path, \"-y\"]))\ndef ask_input(prompt, default_response=None, allowed_responses=None):\n    while True:\n        result = input(prompt)",
        "detail": "hooks.post_gen_project",
        "documentation": {}
    },
    {
        "label": "ask_input",
        "kind": 2,
        "importPath": "hooks.post_gen_project",
        "description": "hooks.post_gen_project",
        "peekOfCode": "def ask_input(prompt, default_response=None, allowed_responses=None):\n    while True:\n        result = input(prompt)\n        if allowed_responses is None:\n            if result:\n                return result.lower()\n        if result.lower() in allowed_responses:\n            return result.lower()\n        if not result and default_response:\n            return default_response.lower()",
        "detail": "hooks.post_gen_project",
        "documentation": {}
    },
    {
        "label": "ansible_vault_encrypt",
        "kind": 2,
        "importPath": "hooks.post_gen_project",
        "description": "hooks.post_gen_project",
        "peekOfCode": "def ansible_vault_encrypt():\n    ansible_vault_file = \"host_vars/{{ cookiecutter.test_host }}/vault.yml\"\n    with open(os.path.join('ansible', ansible_vault_file)) as fp:\n        if \"ANSIBLE_VAULT\" in fp.read():\n            return EncryptionPrompt.ENCRYPTED\n    # Disable vault encryption and any prompts\n    # This means that default action of not committing vault file will be applied\n    is_disabled = os.getenv(\"DISABLE_PROJECT_TEMPLATE_VAULT_ENCRYPT\")\n    if is_disabled and is_disabled == '1':\n        return EncryptionPrompt.EXCLUDED",
        "detail": "hooks.post_gen_project",
        "documentation": {}
    },
    {
        "label": "is_git_repository",
        "kind": 2,
        "importPath": "hooks.post_gen_project",
        "description": "hooks.post_gen_project",
        "peekOfCode": "def is_git_repository(path):\n    return path.startswith('/') and os.path.exists(path) and os.path.exists(os.path.join(path, '.git'))\ndef get_local_commit(template_dir='{{ cookiecutter._template }}'):\n    return subprocess.check_output([\"git\", \"rev-parse\", \"@\"], cwd=template_dir).decode().strip()\ndef get_commit_details(commit_id, template_dir='{{ cookiecutter._template }}'):\n    sep = ':|:|:'\n    return subprocess.check_output([\n        \"git\",\n        \"--no-pager\",\n        \"log\",",
        "detail": "hooks.post_gen_project",
        "documentation": {}
    },
    {
        "label": "get_local_commit",
        "kind": 2,
        "importPath": "hooks.post_gen_project",
        "description": "hooks.post_gen_project",
        "peekOfCode": "def get_local_commit(template_dir='{{ cookiecutter._template }}'):\n    return subprocess.check_output([\"git\", \"rev-parse\", \"@\"], cwd=template_dir).decode().strip()\ndef get_commit_details(commit_id, template_dir='{{ cookiecutter._template }}'):\n    sep = ':|:|:'\n    return subprocess.check_output([\n        \"git\",\n        \"--no-pager\",\n        \"log\",\n        \"-n\",\n        \"1\",",
        "detail": "hooks.post_gen_project",
        "documentation": {}
    },
    {
        "label": "get_commit_details",
        "kind": 2,
        "importPath": "hooks.post_gen_project",
        "description": "hooks.post_gen_project",
        "peekOfCode": "def get_commit_details(commit_id, template_dir='{{ cookiecutter._template }}'):\n    sep = ':|:|:'\n    return subprocess.check_output([\n        \"git\",\n        \"--no-pager\",\n        \"log\",\n        \"-n\",\n        \"1\",\n        \"--oneline\",\n        \"--format=%H{0}%an <%ae>{0}%cI{0}%s\".format(sep),",
        "detail": "hooks.post_gen_project",
        "documentation": {}
    },
    {
        "label": "get_local_branch",
        "kind": 2,
        "importPath": "hooks.post_gen_project",
        "description": "hooks.post_gen_project",
        "peekOfCode": "def get_local_branch(template_dir='{{ cookiecutter._template }}'):\n    return subprocess.check_output([\"git\", \"rev-parse\", \"--abbrev-ref\", \"@\"], cwd=template_dir).decode().strip()\ndef create_repos():\n    if subprocess.check_call(['git', '--version']) != 0:\n        # This is unlikely, but just in case, display some sensible message.\n        print(\"No git executable found on path. Skipping Git setup\")\n        return\n    if os.path.exists('.git'):\n        print('Creating git repository - SKIP - already exists')\n        return",
        "detail": "hooks.post_gen_project",
        "documentation": {}
    },
    {
        "label": "create_repos",
        "kind": 2,
        "importPath": "hooks.post_gen_project",
        "description": "hooks.post_gen_project",
        "peekOfCode": "def create_repos():\n    if subprocess.check_call(['git', '--version']) != 0:\n        # This is unlikely, but just in case, display some sensible message.\n        print(\"No git executable found on path. Skipping Git setup\")\n        return\n    if os.path.exists('.git'):\n        print('Creating git repository - SKIP - already exists')\n        return\n    ansible_vault_encryption = ansible_vault_encrypt()\n    template_dir = '{{ cookiecutter._template }}'",
        "detail": "hooks.post_gen_project",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "hooks.post_gen_project",
        "description": "hooks.post_gen_project",
        "peekOfCode": "def main():\n    \"\"\"Do some stuff based on configuration\"\"\"\n    cleanup()\n    create_repos()\nif __name__ == '__main__':\n    main()",
        "detail": "hooks.post_gen_project",
        "documentation": {}
    },
    {
        "label": "YES",
        "kind": 5,
        "importPath": "hooks.post_gen_project",
        "description": "hooks.post_gen_project",
        "peekOfCode": "YES = \"{{YES}}\"\nNO = \"{{NO}}\"\nWEBAPP = \"{{WEBAPP}}\"\nSPA = \"{{SPA}}\"\nALPINE = \"{{ALPINE}}\"\nDEBIAN = \"{{DEBIAN}}\"\nclass EncryptionPrompt(Enum):\n    ENCRYPTED = 1\n    EXCLUDED = 2\ndef cleanup():",
        "detail": "hooks.post_gen_project",
        "documentation": {}
    },
    {
        "label": "NO",
        "kind": 5,
        "importPath": "hooks.post_gen_project",
        "description": "hooks.post_gen_project",
        "peekOfCode": "NO = \"{{NO}}\"\nWEBAPP = \"{{WEBAPP}}\"\nSPA = \"{{SPA}}\"\nALPINE = \"{{ALPINE}}\"\nDEBIAN = \"{{DEBIAN}}\"\nclass EncryptionPrompt(Enum):\n    ENCRYPTED = 1\n    EXCLUDED = 2\ndef cleanup():\n    cwd = os.getcwd()",
        "detail": "hooks.post_gen_project",
        "documentation": {}
    },
    {
        "label": "WEBAPP",
        "kind": 5,
        "importPath": "hooks.post_gen_project",
        "description": "hooks.post_gen_project",
        "peekOfCode": "WEBAPP = \"{{WEBAPP}}\"\nSPA = \"{{SPA}}\"\nALPINE = \"{{ALPINE}}\"\nDEBIAN = \"{{DEBIAN}}\"\nclass EncryptionPrompt(Enum):\n    ENCRYPTED = 1\n    EXCLUDED = 2\ndef cleanup():\n    cwd = os.getcwd()\n    print('cleanup paths in %s' % cwd)",
        "detail": "hooks.post_gen_project",
        "documentation": {}
    },
    {
        "label": "SPA",
        "kind": 5,
        "importPath": "hooks.post_gen_project",
        "description": "hooks.post_gen_project",
        "peekOfCode": "SPA = \"{{SPA}}\"\nALPINE = \"{{ALPINE}}\"\nDEBIAN = \"{{DEBIAN}}\"\nclass EncryptionPrompt(Enum):\n    ENCRYPTED = 1\n    EXCLUDED = 2\ndef cleanup():\n    cwd = os.getcwd()\n    print('cleanup paths in %s' % cwd)\n    cleanup_paths = []",
        "detail": "hooks.post_gen_project",
        "documentation": {}
    },
    {
        "label": "ALPINE",
        "kind": 5,
        "importPath": "hooks.post_gen_project",
        "description": "hooks.post_gen_project",
        "peekOfCode": "ALPINE = \"{{ALPINE}}\"\nDEBIAN = \"{{DEBIAN}}\"\nclass EncryptionPrompt(Enum):\n    ENCRYPTED = 1\n    EXCLUDED = 2\ndef cleanup():\n    cwd = os.getcwd()\n    print('cleanup paths in %s' % cwd)\n    cleanup_paths = []\n    rename_paths: List[Tuple[str, str]] = []  # Tuples of old -> new path",
        "detail": "hooks.post_gen_project",
        "documentation": {}
    },
    {
        "label": "DEBIAN",
        "kind": 5,
        "importPath": "hooks.post_gen_project",
        "description": "hooks.post_gen_project",
        "peekOfCode": "DEBIAN = \"{{DEBIAN}}\"\nclass EncryptionPrompt(Enum):\n    ENCRYPTED = 1\n    EXCLUDED = 2\ndef cleanup():\n    cwd = os.getcwd()\n    print('cleanup paths in %s' % cwd)\n    cleanup_paths = []\n    rename_paths: List[Tuple[str, str]] = []  # Tuples of old -> new path\n    symlinks = []",
        "detail": "hooks.post_gen_project",
        "documentation": {}
    },
    {
        "label": "is_git_repository",
        "kind": 2,
        "importPath": "hooks.pre_gen_project",
        "description": "hooks.pre_gen_project",
        "peekOfCode": "def is_git_repository(path):\n    return path.startswith('/') and os.path.exists(path) and os.path.exists(os.path.join(path, '.git'))\ndef check_remote_repository_updates():\n    template_dir = '{{ cookiecutter._template }}'\n    if not is_git_repository(template_dir):\n        print(\"Template dir is not absolute dir or not Git repo; skipping freshness check\")\n        return\n    if os.environ.get(\"GITLAB_CI\", \"\") != \"\":\n        print(\"No latest version check necessary in CI\")\n        return",
        "detail": "hooks.pre_gen_project",
        "documentation": {}
    },
    {
        "label": "check_remote_repository_updates",
        "kind": 2,
        "importPath": "hooks.pre_gen_project",
        "description": "hooks.pre_gen_project",
        "peekOfCode": "def check_remote_repository_updates():\n    template_dir = '{{ cookiecutter._template }}'\n    if not is_git_repository(template_dir):\n        print(\"Template dir is not absolute dir or not Git repo; skipping freshness check\")\n        return\n    if os.environ.get(\"GITLAB_CI\", \"\") != \"\":\n        print(\"No latest version check necessary in CI\")\n        return\n    print('Template dir:', template_dir)\n    print('Checking for latest template version via git')",
        "detail": "hooks.pre_gen_project",
        "documentation": {}
    },
    {
        "label": "validate_config",
        "kind": 2,
        "importPath": "hooks.pre_gen_project",
        "description": "hooks.pre_gen_project",
        "peekOfCode": "def validate_config():\n    # Ensure the selected repo name is usable\n    repo_name = '{{ cookiecutter.repo_name }}'\n    assert_msg = 'Repo name should be valid Python identifier!'\n    if hasattr(repo_name, 'isidentifier'):\n        assert repo_name.isidentifier(), assert_msg\n    else:\n        identifier_re = re.compile(r\"[a-zA-Z_][a-zA-Z0-9_]*$\")\n        assert bool(identifier_re.match(repo_name)), assert_msg\n    django_admin_path = \"{{ cookiecutter.django_admin_path }}\"",
        "detail": "hooks.pre_gen_project",
        "documentation": {}
    },
    {
        "label": "copy_cookiecutter_config",
        "kind": 2,
        "importPath": "hooks.pre_gen_project",
        "description": "hooks.pre_gen_project",
        "peekOfCode": "def copy_cookiecutter_config(local_filename='.cookiecutterrc'):\n    \"\"\" Copy cookiecutter replay for template to project dir, unless it already exists.\n    This creates the initial .cookiecutterrc file when the project is first generated.\n    \"\"\"\n    template_dir = os.path.abspath('{{ cookiecutter._template }}')\n    template_name = os.path.basename(template_dir) or \"django-project-template\"\n    replay_filename = os.path.expanduser(f'~/.cookiecutter_replay/{template_name}.json')\n    if not os.path.exists(replay_filename) or os.path.exists(local_filename):\n        # This happens when we're upgrading an existing project\n        return",
        "detail": "hooks.pre_gen_project",
        "documentation": {}
    },
    {
        "label": "YES",
        "kind": 5,
        "importPath": "hooks.pre_gen_project",
        "description": "hooks.pre_gen_project",
        "peekOfCode": "YES = \"{{YES}}\"\nNO = \"{{NO}}\"\nWEBAPP = \"{{WEBAPP}}\"\nSPA = \"{{SPA}}\"\n# Ensure cookiecutter is recent enough\ncookiecutter_min_version = '1.7.0'\nif cookiecutter.__version__ < cookiecutter_min_version:\n    print(\"--------------------------------------------------------------\")\n    print(\"!! Your cookiecutter is too old, at least %s is required !!\" % cookiecutter_min_version)\n    print(\"--------------------------------------------------------------\")",
        "detail": "hooks.pre_gen_project",
        "documentation": {}
    },
    {
        "label": "NO",
        "kind": 5,
        "importPath": "hooks.pre_gen_project",
        "description": "hooks.pre_gen_project",
        "peekOfCode": "NO = \"{{NO}}\"\nWEBAPP = \"{{WEBAPP}}\"\nSPA = \"{{SPA}}\"\n# Ensure cookiecutter is recent enough\ncookiecutter_min_version = '1.7.0'\nif cookiecutter.__version__ < cookiecutter_min_version:\n    print(\"--------------------------------------------------------------\")\n    print(\"!! Your cookiecutter is too old, at least %s is required !!\" % cookiecutter_min_version)\n    print(\"--------------------------------------------------------------\")\n    sys.exit(1)",
        "detail": "hooks.pre_gen_project",
        "documentation": {}
    },
    {
        "label": "WEBAPP",
        "kind": 5,
        "importPath": "hooks.pre_gen_project",
        "description": "hooks.pre_gen_project",
        "peekOfCode": "WEBAPP = \"{{WEBAPP}}\"\nSPA = \"{{SPA}}\"\n# Ensure cookiecutter is recent enough\ncookiecutter_min_version = '1.7.0'\nif cookiecutter.__version__ < cookiecutter_min_version:\n    print(\"--------------------------------------------------------------\")\n    print(\"!! Your cookiecutter is too old, at least %s is required !!\" % cookiecutter_min_version)\n    print(\"--------------------------------------------------------------\")\n    sys.exit(1)\ndef is_git_repository(path):",
        "detail": "hooks.pre_gen_project",
        "documentation": {}
    },
    {
        "label": "SPA",
        "kind": 5,
        "importPath": "hooks.pre_gen_project",
        "description": "hooks.pre_gen_project",
        "peekOfCode": "SPA = \"{{SPA}}\"\n# Ensure cookiecutter is recent enough\ncookiecutter_min_version = '1.7.0'\nif cookiecutter.__version__ < cookiecutter_min_version:\n    print(\"--------------------------------------------------------------\")\n    print(\"!! Your cookiecutter is too old, at least %s is required !!\" % cookiecutter_min_version)\n    print(\"--------------------------------------------------------------\")\n    sys.exit(1)\ndef is_git_repository(path):\n    return path.startswith('/') and os.path.exists(path) and os.path.exists(os.path.join(path, '.git'))",
        "detail": "hooks.pre_gen_project",
        "documentation": {}
    },
    {
        "label": "cookiecutter_min_version",
        "kind": 5,
        "importPath": "hooks.pre_gen_project",
        "description": "hooks.pre_gen_project",
        "peekOfCode": "cookiecutter_min_version = '1.7.0'\nif cookiecutter.__version__ < cookiecutter_min_version:\n    print(\"--------------------------------------------------------------\")\n    print(\"!! Your cookiecutter is too old, at least %s is required !!\" % cookiecutter_min_version)\n    print(\"--------------------------------------------------------------\")\n    sys.exit(1)\ndef is_git_repository(path):\n    return path.startswith('/') and os.path.exists(path) and os.path.exists(os.path.join(path, '.git'))\ndef check_remote_repository_updates():\n    template_dir = '{{ cookiecutter._template }}'",
        "detail": "hooks.pre_gen_project",
        "documentation": {}
    },
    {
        "label": "pytest_addoption",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def pytest_addoption(parser):\n    parser.addoption(\n        \"-E\",\n        action=\"store\",\n        metavar=\"NAME\",\n        default='main',\n        help=\"only run tests matching the environment NAME.\",\n    )\ndef pytest_configure(config):\n    # register env marker",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "pytest_configure",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def pytest_configure(config):\n    # register env marker\n    config.addinivalue_line(\n        \"markers\", \"env(name): mark test to run only on named environment\"\n    )\n    # Set the base temp directory to TPL_PLAYGROUND so pytest-cookies creates its files into shared storage\n    #  see the following issue for reasoning: https://gitlab.com/gitlab-org/gitlab-ce/issues/41227\n    if os.environ.get(\"CI_SERVER\") == YES:\n        config.option.basetemp = os.environ[\"TPL_PLAYGROUND\"]\n    # until this is resolved: https://github.com/audreyr/cookiecutter/pull/944",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "pytest_runtest_setup",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def pytest_runtest_setup(item):\n    \"\"\"If an environment is specified in command line skip tests that do not match it\n    Note: environment defaults to main\n    Any tests that do not have env marker are automatically treated as env=main\n    \"\"\"\n    environment = item.config.getoption(\"-E\") or 'main'\n    test_envs = [mark.args[0] for mark in item.iter_markers(name=\"env\")] or ['main']\n    if environment not in test_envs:\n        pytest.skip(\"test requires env in {!r}\".format(test_envs))\n@pytest.fixture",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "default_project",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def default_project():\n    return {\n        \"project_title\": \"Test project\",\n        \"repo_name\": \"ci_project\",\n        \"include_celery\": NO,\n        \"webapp_include_storybook\": NO,\n        \"test_host\": \"test1.thorgate.eu\",\n        \"python_version\": \"3.8\",\n        \"node_version\": \"14\",\n        \"frontend_style\": WEBAPP,",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "SPA",
        "kind": 5,
        "importPath": "tests.constants",
        "description": "tests.constants",
        "peekOfCode": "SPA = \"spa\"\nWEBAPP = \"webapp\"\nALPINE = \"alpine\"\nDEBIAN = \"debian\"\nYES = 'yes'\nNO = 'no'\nS3 = 'S3'\nGCS = 'GCS'",
        "detail": "tests.constants",
        "documentation": {}
    },
    {
        "label": "WEBAPP",
        "kind": 5,
        "importPath": "tests.constants",
        "description": "tests.constants",
        "peekOfCode": "WEBAPP = \"webapp\"\nALPINE = \"alpine\"\nDEBIAN = \"debian\"\nYES = 'yes'\nNO = 'no'\nS3 = 'S3'\nGCS = 'GCS'",
        "detail": "tests.constants",
        "documentation": {}
    },
    {
        "label": "ALPINE",
        "kind": 5,
        "importPath": "tests.constants",
        "description": "tests.constants",
        "peekOfCode": "ALPINE = \"alpine\"\nDEBIAN = \"debian\"\nYES = 'yes'\nNO = 'no'\nS3 = 'S3'\nGCS = 'GCS'",
        "detail": "tests.constants",
        "documentation": {}
    },
    {
        "label": "DEBIAN",
        "kind": 5,
        "importPath": "tests.constants",
        "description": "tests.constants",
        "peekOfCode": "DEBIAN = \"debian\"\nYES = 'yes'\nNO = 'no'\nS3 = 'S3'\nGCS = 'GCS'",
        "detail": "tests.constants",
        "documentation": {}
    },
    {
        "label": "YES",
        "kind": 5,
        "importPath": "tests.constants",
        "description": "tests.constants",
        "peekOfCode": "YES = 'yes'\nNO = 'no'\nS3 = 'S3'\nGCS = 'GCS'",
        "detail": "tests.constants",
        "documentation": {}
    },
    {
        "label": "NO",
        "kind": 5,
        "importPath": "tests.constants",
        "description": "tests.constants",
        "peekOfCode": "NO = 'no'\nS3 = 'S3'\nGCS = 'GCS'",
        "detail": "tests.constants",
        "documentation": {}
    },
    {
        "label": "S3",
        "kind": 5,
        "importPath": "tests.constants",
        "description": "tests.constants",
        "peekOfCode": "S3 = 'S3'\nGCS = 'GCS'",
        "detail": "tests.constants",
        "documentation": {}
    },
    {
        "label": "GCS",
        "kind": 5,
        "importPath": "tests.constants",
        "description": "tests.constants",
        "peekOfCode": "GCS = 'GCS'",
        "detail": "tests.constants",
        "documentation": {}
    },
    {
        "label": "test_as_git_path",
        "kind": 2,
        "importPath": "tests.test_filters",
        "description": "tests.test_filters",
        "peekOfCode": "def test_as_git_path(tmpdir):\n    assert as_git_path(\"gitlab.com/group/project\") == \"git@gitlab.com:group/project.git\"\n    assert (\n        as_git_path(\"http://gitlab.com/group/project\")\n        == \"git@gitlab.com:group/project.git\"\n    )\n    assert (\n        as_git_path(\"https://gitlab.com/group/project\")\n        == \"git@gitlab.com:group/project.git\"\n    )",
        "detail": "tests.test_filters",
        "documentation": {}
    },
    {
        "label": "test_get_url_path",
        "kind": 2,
        "importPath": "tests.test_filters",
        "description": "tests.test_filters",
        "peekOfCode": "def test_get_url_path():\n    assert (\n        get_url_path(\"https://gitlab.com/thorgate-public/django-project-template\")\n        == \"thorgate-public/django-project-template\"\n    )\n    assert (\n        get_url_path(\"http://gitlab.com/thorgate-public/django-project-template\")\n        == \"thorgate-public/django-project-template\"\n    )\n    assert (",
        "detail": "tests.test_filters",
        "documentation": {}
    },
    {
        "label": "generate_project",
        "kind": 2,
        "importPath": "tests.test_generation",
        "description": "tests.test_generation",
        "peekOfCode": "def generate_project(cookies, config):\n    os.environ.setdefault(\"DISABLE_PROJECT_TEMPLATE_VAULT_ENCRYPT\", '1')\n    cookies._config_file = USER_CONFIG_PATH\n    result = cookies.bake(extra_context=config)\n    assert result.exit_code == 0, f\"Failed to generate {result.exit_code} - {result.exception}\"\n    assert result.exception is None\n    assert result.project.basename == config['repo_name']\n    assert result.project.isdir()\n    assert result.project.join('{repo_name}/manage.py'.format(**config)).exists()\n    return result",
        "detail": "tests.test_generation",
        "documentation": {}
    },
    {
        "label": "validate_project_works",
        "kind": 2,
        "importPath": "tests.test_generation",
        "description": "tests.test_generation",
        "peekOfCode": "def validate_project_works(result, config):\n    project_dir = str(result.project)\n    project_inner_dir = str(result.project.join(config['repo_name']))\n    with open(os.path.join(project_dir, '.gitlab-ci.yml')) as f:\n        gitlab_ci = yaml.load(f, Loader=yaml.FullLoader)\n    # Grab commands and environment from gitlab-ci\n    django_commands = gitlab_ci['test-django']['script']\n    node_commands = gitlab_ci['test-node']['script']\n    commands = django_commands + node_commands\n    if not commands:",
        "detail": "tests.test_generation",
        "documentation": {}
    },
    {
        "label": "test_base_generate",
        "kind": 2,
        "importPath": "tests.test_generation",
        "description": "tests.test_generation",
        "peekOfCode": "def test_base_generate(cookies, default_project, docker_base_image):\n    config = {**default_project, 'docker_base_image': docker_base_image}\n    result = generate_project(cookies, config)\n    assert result.project.join('.gitignore').exists()\n    assert result.project.join('webapp/').exists()\n    assert not result.project.join('app/').exists()\n    validate_project_works(result, config)\n@pytest.mark.env(\"CELERY\")\ndef test_celery_generate(cookies, default_project):\n    default_project.update({",
        "detail": "tests.test_generation",
        "documentation": {}
    },
    {
        "label": "test_celery_generate",
        "kind": 2,
        "importPath": "tests.test_generation",
        "description": "tests.test_generation",
        "peekOfCode": "def test_celery_generate(cookies, default_project):\n    default_project.update({\n        'include_celery': YES,\n    })\n    result = generate_project(cookies, default_project)\n    assert result.project.join('docker-compose.yml').exists()\n    with open(result.project.join('docker-compose.yml')) as f:\n        contents = f.read()\n    assert 'celery:' in contents\n    validate_project_works(result, default_project)",
        "detail": "tests.test_generation",
        "documentation": {}
    },
    {
        "label": "test_storybook_generate",
        "kind": 2,
        "importPath": "tests.test_generation",
        "description": "tests.test_generation",
        "peekOfCode": "def test_storybook_generate(cookies, default_project):\n    default_project.update({\n        'webapp_include_storybook': YES,\n    })\n    result = generate_project(cookies, default_project)\n    assert result.project.join('webapp/webapp/src/.storybook/').exists()\n    validate_project_works(result, default_project)\n@pytest.mark.env(\"SPA\")\ndef test_spa_generate(cookies, default_project):\n    default_project.update({",
        "detail": "tests.test_generation",
        "documentation": {}
    },
    {
        "label": "test_spa_generate",
        "kind": 2,
        "importPath": "tests.test_generation",
        "description": "tests.test_generation",
        "peekOfCode": "def test_spa_generate(cookies, default_project):\n    default_project.update({\n        'frontend_style': SPA,\n    })\n    result = generate_project(cookies, default_project)\n    assert result.project.join('app/').exists()\n    assert not result.project.join('webapp/').exists()\n    validate_project_works(result, default_project)\n@pytest.mark.env(\"DEBIAN_SPA\")\ndef test_debian_spa_generate(cookies, default_project):",
        "detail": "tests.test_generation",
        "documentation": {}
    },
    {
        "label": "test_debian_spa_generate",
        "kind": 2,
        "importPath": "tests.test_generation",
        "description": "tests.test_generation",
        "peekOfCode": "def test_debian_spa_generate(cookies, default_project):\n    default_project.update({\n        'frontend_style': SPA,\n        'docker_base_image': DEBIAN,\n    })\n    result = generate_project(cookies, default_project)\n    assert result.project.join('app/').exists()\n    assert not result.project.join('webapp/').exists()\n    validate_project_works(result, default_project)\n@pytest.mark.env(\"DEBIAN_WEBAPP\")",
        "detail": "tests.test_generation",
        "documentation": {}
    },
    {
        "label": "test_debian_webapp_generate",
        "kind": 2,
        "importPath": "tests.test_generation",
        "description": "tests.test_generation",
        "peekOfCode": "def test_debian_webapp_generate(cookies, default_project):\n    default_project.update({\n        'frontend_style': WEBAPP,\n        'docker_base_image': DEBIAN,\n    })\n    result = generate_project(cookies, default_project)\n    assert result.project.join('webapp/').exists()\n    assert not result.project.join('app/').exists()\n    validate_project_works(result, default_project)\n@pytest.mark.env(\"MYPY_WEBAPP\")",
        "detail": "tests.test_generation",
        "documentation": {}
    },
    {
        "label": "test_mypy_webapp_generate",
        "kind": 2,
        "importPath": "tests.test_generation",
        "description": "tests.test_generation",
        "peekOfCode": "def test_mypy_webapp_generate(cookies, default_project):\n    default_project.update({\n        'use_mypy': YES,\n        'frontend_style': WEBAPP,\n    })\n    result = generate_project(cookies, default_project)\n    assert result.project.join('webapp/').exists()\n    assert not result.project.join('app/').exists()\n    validate_project_works(result, default_project)\n@pytest.mark.env(\"MYPY_SPA\")",
        "detail": "tests.test_generation",
        "documentation": {}
    },
    {
        "label": "test_mypy_spa_generate",
        "kind": 2,
        "importPath": "tests.test_generation",
        "description": "tests.test_generation",
        "peekOfCode": "def test_mypy_spa_generate(cookies, default_project):\n    default_project.update({\n        'use_mypy': YES,\n        'frontend_style': SPA,\n    })\n    result = generate_project(cookies, default_project)\n    assert result.project.join('app/').exists()\n    assert not result.project.join('webapp/').exists()\n    validate_project_works(result, default_project)\n@pytest.mark.env(\"CYPRESS_SPA\")",
        "detail": "tests.test_generation",
        "documentation": {}
    },
    {
        "label": "test_cypress_spa_generate",
        "kind": 2,
        "importPath": "tests.test_generation",
        "description": "tests.test_generation",
        "peekOfCode": "def test_cypress_spa_generate(cookies, default_project):\n    default_project.update({\n        'frontend_style': SPA,\n        'use_cypress': YES,\n    })\n    result = generate_project(cookies, default_project)\n    assert result.project.join('app/').exists()\n    assert result.project.join('app/cypress/').exists()\n    assert result.project.join('app/cypress.json').exists()\n    assert not result.project.join('webapp/').exists()",
        "detail": "tests.test_generation",
        "documentation": {}
    },
    {
        "label": "test_cypress_webapp_generate",
        "kind": 2,
        "importPath": "tests.test_generation",
        "description": "tests.test_generation",
        "peekOfCode": "def test_cypress_webapp_generate(cookies, default_project):\n    default_project.update({\n        'frontend_style': WEBAPP,\n        'use_cypress': YES,\n    })\n    result = generate_project(cookies, default_project)\n    assert result.project.join('webapp/').exists()\n    assert result.project.join('webapp/cypress/').exists()\n    assert result.project.join('webapp/cypress.json').exists()\n    assert not result.project.join('app/').exists()",
        "detail": "tests.test_generation",
        "documentation": {}
    },
    {
        "label": "test_auto_deploy_generate",
        "kind": 2,
        "importPath": "tests.test_generation",
        "description": "tests.test_generation",
        "peekOfCode": "def test_auto_deploy_generate(cookies, default_project):\n    default_project.update({\n        'frontend_style': SPA,\n        'build_in_ci': YES,\n        'use_auto_deploy': YES,\n    })\n    result = generate_project(cookies, default_project)\n    assert result.project.join('ansible/autodeploy.yml').exists()\n    assert result.project.join('ansible/roles/autodeploy').exists()\n    assert result.project.join('scripts/deploy').exists()",
        "detail": "tests.test_generation",
        "documentation": {}
    },
    {
        "label": "test_storybook_not_generate",
        "kind": 2,
        "importPath": "tests.test_generation",
        "description": "tests.test_generation",
        "peekOfCode": "def test_storybook_not_generate(cookies, default_project):\n    default_project.update({\n        'webapp_include_storybook': NO,\n    })\n    result = generate_project(cookies, default_project)\n    assert not result.project.join('webapp/webapp/src/.storybook/').exists()\ndef test_invalid_project_name_is_error(cookies, default_project):\n    default_project.update({\n        'repo_name': '%^&%'\n    })",
        "detail": "tests.test_generation",
        "documentation": {}
    },
    {
        "label": "test_invalid_project_name_is_error",
        "kind": 2,
        "importPath": "tests.test_generation",
        "description": "tests.test_generation",
        "peekOfCode": "def test_invalid_project_name_is_error(cookies, default_project):\n    default_project.update({\n        'repo_name': '%^&%'\n    })\n    result = cookies.bake(extra_context=default_project)\n    assert result.exit_code == -1\n    assert isinstance(result.exception, FailedHookException)\ndef test_invalid_django_admin_path_is_error(cookies, default_project):\n    default_project.update({\n        'django_admin_path': '/invalid-path/'",
        "detail": "tests.test_generation",
        "documentation": {}
    },
    {
        "label": "test_invalid_django_admin_path_is_error",
        "kind": 2,
        "importPath": "tests.test_generation",
        "description": "tests.test_generation",
        "peekOfCode": "def test_invalid_django_admin_path_is_error(cookies, default_project):\n    default_project.update({\n        'django_admin_path': '/invalid-path/'\n    })\n    result = cookies.bake(extra_context=default_project)\n    assert result.exit_code == -1\n    assert isinstance(result.exception, FailedHookException)\ndef test_invalid_django_health_check_path_is_error(cookies, default_project):\n    default_project.update({\n        'django_health_check_path': '/invalid-path/'",
        "detail": "tests.test_generation",
        "documentation": {}
    },
    {
        "label": "test_invalid_django_health_check_path_is_error",
        "kind": 2,
        "importPath": "tests.test_generation",
        "description": "tests.test_generation",
        "peekOfCode": "def test_invalid_django_health_check_path_is_error(cookies, default_project):\n    default_project.update({\n        'django_health_check_path': '/invalid-path/'\n    })\n    result = cookies.bake(extra_context=default_project)\n    assert result.exit_code == -1\n    assert isinstance(result.exception, FailedHookException)\ndef test_invalid_test_host_is_error(cookies, default_project):\n    default_project.update({\n        'test_host': '-foo.com',",
        "detail": "tests.test_generation",
        "documentation": {}
    },
    {
        "label": "test_invalid_test_host_is_error",
        "kind": 2,
        "importPath": "tests.test_generation",
        "description": "tests.test_generation",
        "peekOfCode": "def test_invalid_test_host_is_error(cookies, default_project):\n    default_project.update({\n        'test_host': '-foo.com',\n    })\n    result = cookies.bake(extra_context=default_project)\n    assert result.exit_code == -1\n    assert isinstance(result.exception, FailedHookException)\ndef test_invalid_test_hostname_is_error(cookies, default_project):\n    default_project.update({\n        'repo_name': '_foo',  # translated to `-foo.{{ test_host }}` for the hostname",
        "detail": "tests.test_generation",
        "documentation": {}
    },
    {
        "label": "test_invalid_test_hostname_is_error",
        "kind": 2,
        "importPath": "tests.test_generation",
        "description": "tests.test_generation",
        "peekOfCode": "def test_invalid_test_hostname_is_error(cookies, default_project):\n    default_project.update({\n        'repo_name': '_foo',  # translated to `-foo.{{ test_host }}` for the hostname\n    })\n    result = cookies.bake(extra_context=default_project)\n    assert result.exit_code == -1\n    assert isinstance(result.exception, FailedHookException)\ndef test_invalid_domain_name_is_error(cookies, default_project):\n    default_project.update({\n        'domain_name': '-foo.com',",
        "detail": "tests.test_generation",
        "documentation": {}
    },
    {
        "label": "test_invalid_domain_name_is_error",
        "kind": 2,
        "importPath": "tests.test_generation",
        "description": "tests.test_generation",
        "peekOfCode": "def test_invalid_domain_name_is_error(cookies, default_project):\n    default_project.update({\n        'domain_name': '-foo.com',\n    })\n    result = cookies.bake(extra_context=default_project)\n    assert result.exit_code == -1\n    assert isinstance(result.exception, FailedHookException)",
        "detail": "tests.test_generation",
        "documentation": {}
    },
    {
        "label": "test_tmpdir_path",
        "kind": 2,
        "importPath": "tests.test_shared_dir",
        "description": "tests.test_shared_dir",
        "peekOfCode": "def test_tmpdir_path(tmpdir):\n    if os.environ.get(\"CI_SERVER\") == YES:\n        assert str(tmpdir).startswith(os.environ[\"TPL_PLAYGROUND\"])",
        "detail": "tests.test_shared_dir",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.jwt.urls",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.jwt.urls",
        "peekOfCode": "urlpatterns = [\n    re_path(r\"^token/$\", token_obtain_pair, name=\"token-obtain\"),\n    re_path(r\"^token/refresh/$\", token_refresh, name=\"token-refresh\"),\n    re_path(r\"^token/verify/$\", token_verify, name=\"token-verify\"),\n]",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.jwt.urls",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.migrations.0001_initial",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"auth\", \"0006_require_contenttypes_0002\"),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"User\",\n            fields=[\n                (\n                    \"id\",",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.migrations.0002_alter_user_email",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.migrations.0002_alter_user_email",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"accounts\", \"0001_initial\"),\n    ]\n    operations = [\n        CITextExtension(),\n        migrations.AlterField(\n            model_name=\"user\",\n            name=\"email\",\n            field=django.contrib.postgres.fields.citext.CIEmailField(",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.migrations.0002_alter_user_email",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.migrations.0003_alter_user_id",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.migrations.0003_alter_user_id",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"accounts\", \"0002_alter_user_email\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"user\",\n            name=\"id\",\n            field=models.BigAutoField(\n                auto_created=True, primary_key=True, serialize=False, verbose_name=\"ID\"",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.migrations.0003_alter_user_id",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.rest.urls",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.rest.urls",
        "peekOfCode": "urlpatterns = [\n    re_path(r\"^me$\", views.UserDetails.as_view(), name=\"api-user-details\"),\n    # signup\n    re_path(r\"^signup$\", views.SignUpView.as_view(), name=\"api-signup\"),\n    # password recovery\n    re_path(r\"^forgot_password$\", ForgotPassword.as_view(), name=\"api-forgot-password\"),\n    re_path(\n        r\"^forgot_password/token$\",\n        RestorePassword.as_view(),\n        name=\"api-forgot-password-token\",",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.rest.urls",
        "documentation": {}
    },
    {
        "label": "UserDetails",
        "kind": 6,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.rest.views",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.rest.views",
        "peekOfCode": "class UserDetails(TgReactUserDetails):\n    authentication_classes = api_settings.DEFAULT_AUTHENTICATION_CLASSES\nclass SignUpView(TgReactSignUpView):\n    serializer_class = SignupSerializer\n    def post(self, request):\n        # TG_REACT_UPGRADE: Code is copied over to correctly create Organizations\n        serializer = self.serializer_class(\n            data=request.data, context={\"request\": request}\n        )\n        if serializer.is_valid():",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.rest.views",
        "documentation": {}
    },
    {
        "label": "SignUpView",
        "kind": 6,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.rest.views",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.rest.views",
        "peekOfCode": "class SignUpView(TgReactSignUpView):\n    serializer_class = SignupSerializer\n    def post(self, request):\n        # TG_REACT_UPGRADE: Code is copied over to correctly create Organizations\n        serializer = self.serializer_class(\n            data=request.data, context={\"request\": request}\n        )\n        if serializer.is_valid():\n            data: dict = serializer.validated_data.copy()\n            password = data.pop(\"password\", None)",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.rest.views",
        "documentation": {}
    },
    {
        "label": "test_admin_create_user",
        "kind": 2,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.tests.test_admin",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.tests.test_admin",
        "peekOfCode": "def test_admin_create_user(client, superuser):\n    client.force_login(superuser)\n    random_pass = User.objects.make_random_password(16)\n    response = client.post(\n        reverse(f\"admin:{User._meta.app_label}_{User._meta.model_name}_add\"),\n        data=urlencode(\n            {\n                \"email\": \"t@t.sdf\",\n                \"password1\": random_pass,\n                \"password2\": random_pass,",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.tests.test_admin",
        "documentation": {}
    },
    {
        "label": "test_admin_change_user",
        "kind": 2,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.tests.test_admin",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.tests.test_admin",
        "peekOfCode": "def test_admin_change_user(superuser):\n    client = Client(enforce_csrf_checks=True)\n    client.force_login(superuser)\n    assert superuser.name != \"tester\"\n    url = reverse(\n        f\"admin:{User._meta.app_label}_{User._meta.model_name}_change\",\n        args=(superuser.pk, ),\n    )\n    # This request gets the csrf token for following request\n    response = client.get(url)",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.tests.test_admin",
        "documentation": {}
    },
    {
        "label": "test_custom_user_model",
        "kind": 2,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.tests.test_models",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.tests.test_models",
        "peekOfCode": "def test_custom_user_model():\n    assert settings.AUTH_USER_MODEL == \"accounts.User\"\n@pytest.mark.django_db\ndef test_get_full_name():\n    user = User(name=\"Foo bar Buzz III\")\n    assert user.get_full_name() == \"Foo bar Buzz III\"\n@pytest.mark.django_db\ndef test_get_short_name():\n    user = User(name=\"Foo bar Buzz III\")\n    assert user.get_short_name() == \"Foo bar Buzz III\"",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.tests.test_models",
        "documentation": {}
    },
    {
        "label": "test_get_full_name",
        "kind": 2,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.tests.test_models",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.tests.test_models",
        "peekOfCode": "def test_get_full_name():\n    user = User(name=\"Foo bar Buzz III\")\n    assert user.get_full_name() == \"Foo bar Buzz III\"\n@pytest.mark.django_db\ndef test_get_short_name():\n    user = User(name=\"Foo bar Buzz III\")\n    assert user.get_short_name() == \"Foo bar Buzz III\"\n@pytest.mark.django_db\ndef test_create_user():\n    now = timezone.now()",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.tests.test_models",
        "documentation": {}
    },
    {
        "label": "test_get_short_name",
        "kind": 2,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.tests.test_models",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.tests.test_models",
        "peekOfCode": "def test_get_short_name():\n    user = User(name=\"Foo bar Buzz III\")\n    assert user.get_short_name() == \"Foo bar Buzz III\"\n@pytest.mark.django_db\ndef test_create_user():\n    now = timezone.now()\n    with freeze_time(now):\n        user = User.objects.create_user(email=\"Foo@BAR.sdf\")\n        # domain part is lowered by django by default. the email part is lowered by the DB\n        assert user.email == \"Foo@bar.sdf\"",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.tests.test_models",
        "documentation": {}
    },
    {
        "label": "test_create_user",
        "kind": 2,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.tests.test_models",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.tests.test_models",
        "peekOfCode": "def test_create_user():\n    now = timezone.now()\n    with freeze_time(now):\n        user = User.objects.create_user(email=\"Foo@BAR.sdf\")\n        # domain part is lowered by django by default. the email part is lowered by the DB\n        assert user.email == \"Foo@bar.sdf\"\n        assert user.is_active\n        assert not user.is_staff\n        assert not user.is_superuser\n        assert user.last_login == now",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.tests.test_models",
        "documentation": {}
    },
    {
        "label": "test_create_user_email_required",
        "kind": 2,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.tests.test_models",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.tests.test_models",
        "peekOfCode": "def test_create_user_email_required():\n    with pytest.raises(ValueError):\n        User.objects.create_user(email=\"\")\n    with pytest.raises(ValueError):\n        User.objects.create_user()\n@pytest.mark.django_db\ndef test_create_superuser():\n    random_pass = User.objects.make_random_password(16)\n    now = timezone.now()\n    with freeze_time(now):",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.tests.test_models",
        "documentation": {}
    },
    {
        "label": "test_create_superuser",
        "kind": 2,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.tests.test_models",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.tests.test_models",
        "peekOfCode": "def test_create_superuser():\n    random_pass = User.objects.make_random_password(16)\n    now = timezone.now()\n    with freeze_time(now):\n        user = User.objects.create_superuser(email=\"Foo@BAR.sdf\", password=random_pass)\n        assert user.email == \"Foo@bar.sdf\"\n        assert user.is_active\n        assert user.is_staff\n        assert user.is_superuser\n        assert user.last_login == now",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.tests.test_models",
        "documentation": {}
    },
    {
        "label": "UserChangeForm",
        "kind": 6,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.admin",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.admin",
        "peekOfCode": "class UserChangeForm(auth_forms.UserChangeForm):\n    # Hackish variant of builtin UserChangeForm with no username\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        if \"username\" in self.fields:  # pragma: no cover\n            del self.fields[\"username\"]\nclass UserCreationForm(auth_forms.UserCreationForm):\n    # Hackish variant of builtin UserCreationForm with email instead of username\n    class Meta:\n        model = User",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.admin",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "kind": 6,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.admin",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.admin",
        "peekOfCode": "class UserCreationForm(auth_forms.UserCreationForm):\n    # Hackish variant of builtin UserCreationForm with email instead of username\n    class Meta:\n        model = User\n        fields = (\"email\",)\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        if \"username\" in self.fields:  # pragma: no cover\n            del self.fields[\"username\"]\nclass CustomUserAdmin(UserAdmin):",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.admin",
        "documentation": {}
    },
    {
        "label": "CustomUserAdmin",
        "kind": 6,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.admin",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.admin",
        "peekOfCode": "class CustomUserAdmin(UserAdmin):\n    fieldsets = (\n        (None, {\"fields\": (\"email\", \"password\")}),\n        (_(\"Personal info\"), {\"fields\": (\"name\",)}),\n        (\n            _(\"Permissions\"),\n            {\n                \"fields\": (\n                    \"is_active\",\n                    \"is_staff\",",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.admin",
        "documentation": {}
    },
    {
        "label": "send_password_reset",
        "kind": 2,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.emails",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.emails",
        "peekOfCode": "def send_password_reset(user, uid, token):\n    try:\n        email_subject = _(\"{{cookiecutter.project_title}} password reset\")\n        path = reverse(\"password_reset_confirm\", kwargs={\"uidb64\": uid, \"token\": token})\n        confirm_reset_url = f\"{settings.SITE_URL}{path}\"\n        return send_email(\n            user.email,\n            email_subject,\n            \"emails/password_reset.html\",\n            {\"user\": user, \"confirm_reset_url\": confirm_reset_url},",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.emails",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.emails",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.emails",
        "peekOfCode": "logger = logging.getLogger(\"accounts.emails\")\ndef send_password_reset(user, uid, token):\n    try:\n        email_subject = _(\"{{cookiecutter.project_title}} password reset\")\n        path = reverse(\"password_reset_confirm\", kwargs={\"uidb64\": uid, \"token\": token})\n        confirm_reset_url = f\"{settings.SITE_URL}{path}\"\n        return send_email(\n            user.email,\n            email_subject,\n            \"emails/password_reset.html\",",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.emails",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "kind": 6,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.forms",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.forms",
        "peekOfCode": "class LoginForm(AuthenticationForm):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.helper = FormHelper()\n        self.helper.form_class = \"login-form\"\n        self.helper.form_show_labels = False\n        self.helper.layout = Layout(\n            Field(\"username\", placeholder=_(\"Username\")),\n            Field(\"password\", placeholder=_(\"Password\")),\n        )",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.forms",
        "documentation": {}
    },
    {
        "label": "PasswordResetForm",
        "kind": 6,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.forms",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.forms",
        "peekOfCode": "class PasswordResetForm(auth_forms.PasswordResetForm):\n    helper = FormHelper()\n    helper.form_class = \"login-form\"\n    helper.layout = Layout(\"email\", Submit(\"submit\", _(\"Reset my password\")))\n    def save(self, *args, **kwargs):\n        \"\"\"\n        Generates a one-use only link for resetting password and sends to the\n        Copy of Django's implementation, changed to use our own email-sending.\n        \"\"\"\n        user_model = get_user_model()",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.forms",
        "documentation": {}
    },
    {
        "label": "SetPasswordForm",
        "kind": 6,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.forms",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.forms",
        "peekOfCode": "class SetPasswordForm(auth_forms.SetPasswordForm):\n    helper = FormHelper()\n    helper.form_class = \"login-form\"\n    helper.layout = Layout(\"new_password1\", Submit(\"submit\", _(\"Change my password\")))\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(user, *args, **kwargs)\n        del self.fields[\"new_password2\"]\nclass ChangePasswordForm(forms.ModelForm):\n    class Meta:\n        model = User",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.forms",
        "documentation": {}
    },
    {
        "label": "ChangePasswordForm",
        "kind": 6,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.forms",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.forms",
        "peekOfCode": "class ChangePasswordForm(forms.ModelForm):\n    class Meta:\n        model = User\n        fields: List[str] = []\n    password_old = forms.CharField(\n        widget=forms.PasswordInput(),\n        label=_(\"Enter your old password for confirmation\"),\n        required=True,\n    )\n    password_new = forms.CharField(",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.forms",
        "documentation": {}
    },
    {
        "label": "UserManager",
        "kind": 6,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.models",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.models",
        "peekOfCode": "class UserManager(BaseUserManager):\n    # Mostly copied from django.contrib.auth.models.UserManager\n    def _create_user(self, email, password, is_staff, is_superuser, **extra_fields):\n        \"\"\"\n        Creates and saves a User with the given username, email and password.\n        \"\"\"\n        now = timezone.now()\n        if not email:\n            raise ValueError(\"The given email must be set\")\n        email = self.normalize_email(email)",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.models",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.models",
        "peekOfCode": "class User(AbstractBaseUser, PermissionsMixin):\n    email = CIEmailField(verbose_name=_(\"email address\"), max_length=254, unique=True)\n    name = models.CharField(max_length=255)\n    is_staff = models.BooleanField(_(\"staff status\"), default=False)\n    is_active = models.BooleanField(_(\"active\"), default=True)\n    date_joined = models.DateTimeField(_(\"date joined\"), default=timezone.now)\n    USERNAME_FIELD = \"email\"\n    objects = UserManager()\n    def get_full_name(self):\n        return self.name",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.urls",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.urls",
        "peekOfCode": "urlpatterns = [\n    path(\n        \"login/\",\n        views.LoginView.as_view(\n            template_name=\"accounts/login.html\", authentication_form=LoginForm\n        ),\n        name=\"login\",\n    ),\n    path(\"logout/\", views.LogoutView.as_view(), name=\"logout\"),\n    # Password reset",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.urls",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.views",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.views",
        "peekOfCode": "def login(request):\n    return LoginView.as_view(\n        template_name=\"accounts/login.html\", authentication_form=LoginForm\n    )(request)",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.accounts.views",
        "documentation": {}
    },
    {
        "label": "SITE_ROOT",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "SITE_ROOT = os.path.dirname(os.path.dirname(__file__))\n# Load env to get settings\nenv = environs.Env()\n# Set to true during docker image building (e.g. when running collectstatic)\nIS_DOCKER_BUILD = env.bool(\"DJANGO_DOCKER_BUILD\", default=False)\nIS_UNITTEST = False\nPROJECT_NAME = \"{{ cookiecutter.repo_name }}\"\n# Shown in error pages and some other places\nPROJECT_TITLE = \"{{ cookiecutter.project_title }}\"\n# SECURITY WARNING: don't run with debug turned on in production!",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "env = environs.Env()\n# Set to true during docker image building (e.g. when running collectstatic)\nIS_DOCKER_BUILD = env.bool(\"DJANGO_DOCKER_BUILD\", default=False)\nIS_UNITTEST = False\nPROJECT_NAME = \"{{ cookiecutter.repo_name }}\"\n# Shown in error pages and some other places\nPROJECT_TITLE = \"{{ cookiecutter.project_title }}\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = env.bool(\"DJANGO_DEBUG\", default=True)\nADMINS = ((\"Admins\", \"{{ cookiecutter.admin_email }}\"),)",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "IS_DOCKER_BUILD",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "IS_DOCKER_BUILD = env.bool(\"DJANGO_DOCKER_BUILD\", default=False)\nIS_UNITTEST = False\nPROJECT_NAME = \"{{ cookiecutter.repo_name }}\"\n# Shown in error pages and some other places\nPROJECT_TITLE = \"{{ cookiecutter.project_title }}\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = env.bool(\"DJANGO_DEBUG\", default=True)\nADMINS = ((\"Admins\", \"{{ cookiecutter.admin_email }}\"),)\nMANAGERS = ADMINS\nEMAIL_SUBJECT_PREFIX = (",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "IS_UNITTEST",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "IS_UNITTEST = False\nPROJECT_NAME = \"{{ cookiecutter.repo_name }}\"\n# Shown in error pages and some other places\nPROJECT_TITLE = \"{{ cookiecutter.project_title }}\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = env.bool(\"DJANGO_DEBUG\", default=True)\nADMINS = ((\"Admins\", \"{{ cookiecutter.admin_email }}\"),)\nMANAGERS = ADMINS\nEMAIL_SUBJECT_PREFIX = (\n    \"[{{cookiecutter.project_title}}] \"  # subject prefix for managers & admins",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "PROJECT_NAME",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "PROJECT_NAME = \"{{ cookiecutter.repo_name }}\"\n# Shown in error pages and some other places\nPROJECT_TITLE = \"{{ cookiecutter.project_title }}\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = env.bool(\"DJANGO_DEBUG\", default=True)\nADMINS = ((\"Admins\", \"{{ cookiecutter.admin_email }}\"),)\nMANAGERS = ADMINS\nEMAIL_SUBJECT_PREFIX = (\n    \"[{{cookiecutter.project_title}}] \"  # subject prefix for managers & admins\n)",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "PROJECT_TITLE",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "PROJECT_TITLE = \"{{ cookiecutter.project_title }}\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = env.bool(\"DJANGO_DEBUG\", default=True)\nADMINS = ((\"Admins\", \"{{ cookiecutter.admin_email }}\"),)\nMANAGERS = ADMINS\nEMAIL_SUBJECT_PREFIX = (\n    \"[{{cookiecutter.project_title}}] \"  # subject prefix for managers & admins\n)\nSESSION_COOKIE_NAME = f\"{PROJECT_NAME}_ssid\"\nSESSION_COOKIE_DOMAIN = env.str(\"DJANGO_SESSION_COOKIE_DOMAIN\", default=None)",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "DEBUG = env.bool(\"DJANGO_DEBUG\", default=True)\nADMINS = ((\"Admins\", \"{{ cookiecutter.admin_email }}\"),)\nMANAGERS = ADMINS\nEMAIL_SUBJECT_PREFIX = (\n    \"[{{cookiecutter.project_title}}] \"  # subject prefix for managers & admins\n)\nSESSION_COOKIE_NAME = f\"{PROJECT_NAME}_ssid\"\nSESSION_COOKIE_DOMAIN = env.str(\"DJANGO_SESSION_COOKIE_DOMAIN\", default=None)\nSECURE_PROXY_SSL_HEADER = (\"HTTP_X_FORWARDED_PROTO\", \"https\")\n# - {%- if cookiecutter.frontend_style == SPA %}",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "ADMINS",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "ADMINS = ((\"Admins\", \"{{ cookiecutter.admin_email }}\"),)\nMANAGERS = ADMINS\nEMAIL_SUBJECT_PREFIX = (\n    \"[{{cookiecutter.project_title}}] \"  # subject prefix for managers & admins\n)\nSESSION_COOKIE_NAME = f\"{PROJECT_NAME}_ssid\"\nSESSION_COOKIE_DOMAIN = env.str(\"DJANGO_SESSION_COOKIE_DOMAIN\", default=None)\nSECURE_PROXY_SSL_HEADER = (\"HTTP_X_FORWARDED_PROTO\", \"https\")\n# - {%- if cookiecutter.frontend_style == SPA %}\nCSRF_COOKIE_DOMAIN = env.str(\"DJANGO_CSRF_COOKIE_DOMAIN\", default=None)",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "MANAGERS",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "MANAGERS = ADMINS\nEMAIL_SUBJECT_PREFIX = (\n    \"[{{cookiecutter.project_title}}] \"  # subject prefix for managers & admins\n)\nSESSION_COOKIE_NAME = f\"{PROJECT_NAME}_ssid\"\nSESSION_COOKIE_DOMAIN = env.str(\"DJANGO_SESSION_COOKIE_DOMAIN\", default=None)\nSECURE_PROXY_SSL_HEADER = (\"HTTP_X_FORWARDED_PROTO\", \"https\")\n# - {%- if cookiecutter.frontend_style == SPA %}\nCSRF_COOKIE_DOMAIN = env.str(\"DJANGO_CSRF_COOKIE_DOMAIN\", default=None)\nCSRF_COOKIE_HTTPONLY = False",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "EMAIL_SUBJECT_PREFIX",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "EMAIL_SUBJECT_PREFIX = (\n    \"[{{cookiecutter.project_title}}] \"  # subject prefix for managers & admins\n)\nSESSION_COOKIE_NAME = f\"{PROJECT_NAME}_ssid\"\nSESSION_COOKIE_DOMAIN = env.str(\"DJANGO_SESSION_COOKIE_DOMAIN\", default=None)\nSECURE_PROXY_SSL_HEADER = (\"HTTP_X_FORWARDED_PROTO\", \"https\")\n# - {%- if cookiecutter.frontend_style == SPA %}\nCSRF_COOKIE_DOMAIN = env.str(\"DJANGO_CSRF_COOKIE_DOMAIN\", default=None)\nCSRF_COOKIE_HTTPONLY = False\n# Tg React Url configurations should be same as frontend forgot password URL",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "SESSION_COOKIE_NAME",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "SESSION_COOKIE_NAME = f\"{PROJECT_NAME}_ssid\"\nSESSION_COOKIE_DOMAIN = env.str(\"DJANGO_SESSION_COOKIE_DOMAIN\", default=None)\nSECURE_PROXY_SSL_HEADER = (\"HTTP_X_FORWARDED_PROTO\", \"https\")\n# - {%- if cookiecutter.frontend_style == SPA %}\nCSRF_COOKIE_DOMAIN = env.str(\"DJANGO_CSRF_COOKIE_DOMAIN\", default=None)\nCSRF_COOKIE_HTTPONLY = False\n# Tg React Url configurations should be same as frontend forgot password URL\nTGR_PASSWORD_RECOVERY_URL = \"/auth/reset-password/%s\"\n# - {%- endif %}\nINSTALLED_APPS = [",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "SESSION_COOKIE_DOMAIN",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "SESSION_COOKIE_DOMAIN = env.str(\"DJANGO_SESSION_COOKIE_DOMAIN\", default=None)\nSECURE_PROXY_SSL_HEADER = (\"HTTP_X_FORWARDED_PROTO\", \"https\")\n# - {%- if cookiecutter.frontend_style == SPA %}\nCSRF_COOKIE_DOMAIN = env.str(\"DJANGO_CSRF_COOKIE_DOMAIN\", default=None)\nCSRF_COOKIE_HTTPONLY = False\n# Tg React Url configurations should be same as frontend forgot password URL\nTGR_PASSWORD_RECOVERY_URL = \"/auth/reset-password/%s\"\n# - {%- endif %}\nINSTALLED_APPS = [\n    # Local apps",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "SECURE_PROXY_SSL_HEADER",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "SECURE_PROXY_SSL_HEADER = (\"HTTP_X_FORWARDED_PROTO\", \"https\")\n# - {%- if cookiecutter.frontend_style == SPA %}\nCSRF_COOKIE_DOMAIN = env.str(\"DJANGO_CSRF_COOKIE_DOMAIN\", default=None)\nCSRF_COOKIE_HTTPONLY = False\n# Tg React Url configurations should be same as frontend forgot password URL\nTGR_PASSWORD_RECOVERY_URL = \"/auth/reset-password/%s\"\n# - {%- endif %}\nINSTALLED_APPS = [\n    # Local apps\n    \"accounts\",",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "CSRF_COOKIE_DOMAIN",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "CSRF_COOKIE_DOMAIN = env.str(\"DJANGO_CSRF_COOKIE_DOMAIN\", default=None)\nCSRF_COOKIE_HTTPONLY = False\n# Tg React Url configurations should be same as frontend forgot password URL\nTGR_PASSWORD_RECOVERY_URL = \"/auth/reset-password/%s\"\n# - {%- endif %}\nINSTALLED_APPS = [\n    # Local apps\n    \"accounts\",\n    PROJECT_NAME,\n    # Third-party apps",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "CSRF_COOKIE_HTTPONLY",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "CSRF_COOKIE_HTTPONLY = False\n# Tg React Url configurations should be same as frontend forgot password URL\nTGR_PASSWORD_RECOVERY_URL = \"/auth/reset-password/%s\"\n# - {%- endif %}\nINSTALLED_APPS = [\n    # Local apps\n    \"accounts\",\n    PROJECT_NAME,\n    # Third-party apps\n    # - {% if cookiecutter.frontend_style == WEBAPP %}",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "TGR_PASSWORD_RECOVERY_URL",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "TGR_PASSWORD_RECOVERY_URL = \"/auth/reset-password/%s\"\n# - {%- endif %}\nINSTALLED_APPS = [\n    # Local apps\n    \"accounts\",\n    PROJECT_NAME,\n    # Third-party apps\n    # - {% if cookiecutter.frontend_style == WEBAPP %}\n    \"django_reverse_js\",\n    \"webpack_loader\",",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "INSTALLED_APPS = [\n    # Local apps\n    \"accounts\",\n    PROJECT_NAME,\n    # Third-party apps\n    # - {% if cookiecutter.frontend_style == WEBAPP %}\n    \"django_reverse_js\",\n    \"webpack_loader\",\n    \"crispy_forms\",\n    # - {%- else %}",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "MIDDLEWARE = [\n    # - {%- if cookiecutter.frontend_style == SPA %}\n    \"corsheaders.middleware.CorsMiddleware\",\n    # - {%- endif %}\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    # - {%- if cookiecutter.frontend_style == SPA %}\n    \"django.middleware.locale.LocaleMiddleware\",\n    # - {%- endif %}\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [os.path.join(SITE_ROOT, \"templates\")],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.contrib.auth.context_processors.auth\",\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.i18n\",",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "DATABASES = {\n    # When using DJANGO_DATABASE_URL, unsafe characters in the url should be encoded.\n    # See: https://django-environ.readthedocs.io/en/latest/#using-unsafe-characters-in-urls\n    \"default\": env.dj_db_url(\n        \"DJANGO_DATABASE_URL\",\n        default=\"postgres://{user}:{password}@{host}:{port}/{name}?sslmode={sslmode}\".format(\n            host=env.str(\"DJANGO_DATABASE_HOST\", default=\"postgres\"),\n            port=env.int(\"DJANGO_DATABASE_PORT\", default=5432),\n            name=quote(\n                env.str(\"DJANGO_DATABASE_NAME\", default=\"{{cookiecutter.repo_name}}\")",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# Redis config (used for caching{% if cookiecutter.include_celery == YES %} and celery{% endif %})\nREDIS_URL = env.str(\"DJANGO_REDIS_URL\", default=\"redis://redis:6379/1\")\nREDIS_CACHE_URL = env.str(\"DJANGO_REDIS_CACHE_URL\", default=REDIS_URL)\nREDIS_CELERY_URL = env.str(\"DJANGO_REDIS_CELERY_URL\", default=REDIS_URL)\n# - {%- if cookiecutter.include_celery == YES %}\n# Set your Celerybeat tasks/schedule here\n# Rest of Celery configuration lives in celery_settings.py\nCELERYBEAT_SCHEDULE = {\n    \"default-task\": {",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "REDIS_URL",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "REDIS_URL = env.str(\"DJANGO_REDIS_URL\", default=\"redis://redis:6379/1\")\nREDIS_CACHE_URL = env.str(\"DJANGO_REDIS_CACHE_URL\", default=REDIS_URL)\nREDIS_CELERY_URL = env.str(\"DJANGO_REDIS_CELERY_URL\", default=REDIS_URL)\n# - {%- if cookiecutter.include_celery == YES %}\n# Set your Celerybeat tasks/schedule here\n# Rest of Celery configuration lives in celery_settings.py\nCELERYBEAT_SCHEDULE = {\n    \"default-task\": {\n        # TODO: Remove the default task after confirming that Celery works.\n        \"task\": \"{{cookiecutter.repo_name}}.tasks.default_task\",",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "REDIS_CACHE_URL",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "REDIS_CACHE_URL = env.str(\"DJANGO_REDIS_CACHE_URL\", default=REDIS_URL)\nREDIS_CELERY_URL = env.str(\"DJANGO_REDIS_CELERY_URL\", default=REDIS_URL)\n# - {%- if cookiecutter.include_celery == YES %}\n# Set your Celerybeat tasks/schedule here\n# Rest of Celery configuration lives in celery_settings.py\nCELERYBEAT_SCHEDULE = {\n    \"default-task\": {\n        # TODO: Remove the default task after confirming that Celery works.\n        \"task\": \"{{cookiecutter.repo_name}}.tasks.default_task\",\n        \"schedule\": 5 * 60,",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "REDIS_CELERY_URL",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "REDIS_CELERY_URL = env.str(\"DJANGO_REDIS_CELERY_URL\", default=REDIS_URL)\n# - {%- if cookiecutter.include_celery == YES %}\n# Set your Celerybeat tasks/schedule here\n# Rest of Celery configuration lives in celery_settings.py\nCELERYBEAT_SCHEDULE = {\n    \"default-task\": {\n        # TODO: Remove the default task after confirming that Celery works.\n        \"task\": \"{{cookiecutter.repo_name}}.tasks.default_task\",\n        \"schedule\": 5 * 60,\n    },",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "CELERYBEAT_SCHEDULE",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "CELERYBEAT_SCHEDULE = {\n    \"default-task\": {\n        # TODO: Remove the default task after confirming that Celery works.\n        \"task\": \"{{cookiecutter.repo_name}}.tasks.default_task\",\n        \"schedule\": 5 * 60,\n    },\n    \"cleanup-old-sessions\": {\n        \"task\": \"{{cookiecutter.repo_name}}.tasks.cleanup_old_sessions\",\n        # TODO define the best time suitable for the cleanup.\n        \"schedule\": crontab(minute=45, hour=2),",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "CACHES",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "CACHES = {\n    \"default\": {\n        \"BACKEND\": \"django_redis.cache.RedisCache\",\n        \"LOCATION\": REDIS_CACHE_URL,\n        \"OPTIONS\": {\"CLIENT_CLASS\": \"django_redis.client.DefaultClient\"},\n    }\n}\n# Internationalization\nLANGUAGE_CODE = \"en\"\nLANGUAGES = (",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "LANGUAGE_CODE = \"en\"\nLANGUAGES = (\n    (\"en\", \"English\"),\n    (\"et\", \"Eesti keel\"),\n)\nLOCALE_PATHS = (\"locale\",)\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "LANGUAGES",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "LANGUAGES = (\n    (\"en\", \"English\"),\n    (\"et\", \"Eesti keel\"),\n)\nLOCALE_PATHS = (\"locale\",)\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Media files (user uploaded/site generated)",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "LOCALE_PATHS",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "LOCALE_PATHS = (\"locale\",)\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Media files (user uploaded/site generated)\nMEDIA_ROOT = env.str(\"DJANGO_MEDIA_ROOT\", default=\"/files/media\")\nMEDIA_URL = env.str(\"DJANGO_MEDIA_URL\", default=\"/media/\")\nMEDIAFILES_LOCATION = env.str(\"DJANGO_MEDIAFILES_LOCATION\", default=\"media\")\n# In staging/prod we use {{ cookiecutter.django_media_engine }} for file storage engine",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Media files (user uploaded/site generated)\nMEDIA_ROOT = env.str(\"DJANGO_MEDIA_ROOT\", default=\"/files/media\")\nMEDIA_URL = env.str(\"DJANGO_MEDIA_URL\", default=\"/media/\")\nMEDIAFILES_LOCATION = env.str(\"DJANGO_MEDIAFILES_LOCATION\", default=\"media\")\n# In staging/prod we use {{ cookiecutter.django_media_engine }} for file storage engine\n# - {% if cookiecutter.django_media_engine == S3 %}",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Media files (user uploaded/site generated)\nMEDIA_ROOT = env.str(\"DJANGO_MEDIA_ROOT\", default=\"/files/media\")\nMEDIA_URL = env.str(\"DJANGO_MEDIA_URL\", default=\"/media/\")\nMEDIAFILES_LOCATION = env.str(\"DJANGO_MEDIAFILES_LOCATION\", default=\"media\")\n# In staging/prod we use {{ cookiecutter.django_media_engine }} for file storage engine\n# - {% if cookiecutter.django_media_engine == S3 %}\nAWS_ACCESS_KEY_ID = \"<unset>\"",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# Media files (user uploaded/site generated)\nMEDIA_ROOT = env.str(\"DJANGO_MEDIA_ROOT\", default=\"/files/media\")\nMEDIA_URL = env.str(\"DJANGO_MEDIA_URL\", default=\"/media/\")\nMEDIAFILES_LOCATION = env.str(\"DJANGO_MEDIAFILES_LOCATION\", default=\"media\")\n# In staging/prod we use {{ cookiecutter.django_media_engine }} for file storage engine\n# - {% if cookiecutter.django_media_engine == S3 %}\nAWS_ACCESS_KEY_ID = \"<unset>\"\nAWS_SECRET_ACCESS_KEY = \"<unset>\"",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "USE_TZ = True\n# Media files (user uploaded/site generated)\nMEDIA_ROOT = env.str(\"DJANGO_MEDIA_ROOT\", default=\"/files/media\")\nMEDIA_URL = env.str(\"DJANGO_MEDIA_URL\", default=\"/media/\")\nMEDIAFILES_LOCATION = env.str(\"DJANGO_MEDIAFILES_LOCATION\", default=\"media\")\n# In staging/prod we use {{ cookiecutter.django_media_engine }} for file storage engine\n# - {% if cookiecutter.django_media_engine == S3 %}\nAWS_ACCESS_KEY_ID = \"<unset>\"\nAWS_SECRET_ACCESS_KEY = \"<unset>\"\nAWS_STORAGE_BUCKET_NAME = \"<unset>\"",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "MEDIA_ROOT = env.str(\"DJANGO_MEDIA_ROOT\", default=\"/files/media\")\nMEDIA_URL = env.str(\"DJANGO_MEDIA_URL\", default=\"/media/\")\nMEDIAFILES_LOCATION = env.str(\"DJANGO_MEDIAFILES_LOCATION\", default=\"media\")\n# In staging/prod we use {{ cookiecutter.django_media_engine }} for file storage engine\n# - {% if cookiecutter.django_media_engine == S3 %}\nAWS_ACCESS_KEY_ID = \"<unset>\"\nAWS_SECRET_ACCESS_KEY = \"<unset>\"\nAWS_STORAGE_BUCKET_NAME = \"<unset>\"\nAWS_DEFAULT_ACL = \"public-read\"\nAWS_IS_GZIPPED = True",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "MEDIA_URL = env.str(\"DJANGO_MEDIA_URL\", default=\"/media/\")\nMEDIAFILES_LOCATION = env.str(\"DJANGO_MEDIAFILES_LOCATION\", default=\"media\")\n# In staging/prod we use {{ cookiecutter.django_media_engine }} for file storage engine\n# - {% if cookiecutter.django_media_engine == S3 %}\nAWS_ACCESS_KEY_ID = \"<unset>\"\nAWS_SECRET_ACCESS_KEY = \"<unset>\"\nAWS_STORAGE_BUCKET_NAME = \"<unset>\"\nAWS_DEFAULT_ACL = \"public-read\"\nAWS_IS_GZIPPED = True\nAWS_S3_FILE_OVERWRITE = False",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "MEDIAFILES_LOCATION",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "MEDIAFILES_LOCATION = env.str(\"DJANGO_MEDIAFILES_LOCATION\", default=\"media\")\n# In staging/prod we use {{ cookiecutter.django_media_engine }} for file storage engine\n# - {% if cookiecutter.django_media_engine == S3 %}\nAWS_ACCESS_KEY_ID = \"<unset>\"\nAWS_SECRET_ACCESS_KEY = \"<unset>\"\nAWS_STORAGE_BUCKET_NAME = \"<unset>\"\nAWS_DEFAULT_ACL = \"public-read\"\nAWS_IS_GZIPPED = True\nAWS_S3_FILE_OVERWRITE = False\nAWS_S3_REGION_NAME = \"eu-north-1\"",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "AWS_ACCESS_KEY_ID",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "AWS_ACCESS_KEY_ID = \"<unset>\"\nAWS_SECRET_ACCESS_KEY = \"<unset>\"\nAWS_STORAGE_BUCKET_NAME = \"<unset>\"\nAWS_DEFAULT_ACL = \"public-read\"\nAWS_IS_GZIPPED = True\nAWS_S3_FILE_OVERWRITE = False\nAWS_S3_REGION_NAME = \"eu-north-1\"\nAWS_S3_SIGNATURE_VERSION = \"s3v4\"\n# Only set DJANGO_AWS_S3_ENDPOINT_URL if it's defined in environment, fallback to default value in other cases\n# Useful for s3 provided by other parties than AWS, like DO.",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "AWS_SECRET_ACCESS_KEY",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "AWS_SECRET_ACCESS_KEY = \"<unset>\"\nAWS_STORAGE_BUCKET_NAME = \"<unset>\"\nAWS_DEFAULT_ACL = \"public-read\"\nAWS_IS_GZIPPED = True\nAWS_S3_FILE_OVERWRITE = False\nAWS_S3_REGION_NAME = \"eu-north-1\"\nAWS_S3_SIGNATURE_VERSION = \"s3v4\"\n# Only set DJANGO_AWS_S3_ENDPOINT_URL if it's defined in environment, fallback to default value in other cases\n# Useful for s3 provided by other parties than AWS, like DO.\nif env.str(\"DJANGO_AWS_S3_ENDPOINT_URL\", default=\"\"):",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "AWS_STORAGE_BUCKET_NAME",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "AWS_STORAGE_BUCKET_NAME = \"<unset>\"\nAWS_DEFAULT_ACL = \"public-read\"\nAWS_IS_GZIPPED = True\nAWS_S3_FILE_OVERWRITE = False\nAWS_S3_REGION_NAME = \"eu-north-1\"\nAWS_S3_SIGNATURE_VERSION = \"s3v4\"\n# Only set DJANGO_AWS_S3_ENDPOINT_URL if it's defined in environment, fallback to default value in other cases\n# Useful for s3 provided by other parties than AWS, like DO.\nif env.str(\"DJANGO_AWS_S3_ENDPOINT_URL\", default=\"\"):\n    AWS_S3_ENDPOINT_URL = env.str(\"DJANGO_AWS_S3_ENDPOINT_URL\")",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "AWS_DEFAULT_ACL",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "AWS_DEFAULT_ACL = \"public-read\"\nAWS_IS_GZIPPED = True\nAWS_S3_FILE_OVERWRITE = False\nAWS_S3_REGION_NAME = \"eu-north-1\"\nAWS_S3_SIGNATURE_VERSION = \"s3v4\"\n# Only set DJANGO_AWS_S3_ENDPOINT_URL if it's defined in environment, fallback to default value in other cases\n# Useful for s3 provided by other parties than AWS, like DO.\nif env.str(\"DJANGO_AWS_S3_ENDPOINT_URL\", default=\"\"):\n    AWS_S3_ENDPOINT_URL = env.str(\"DJANGO_AWS_S3_ENDPOINT_URL\")\n# Should be True unless using s3 provider that doesn't support it (like DO)",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "AWS_IS_GZIPPED",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "AWS_IS_GZIPPED = True\nAWS_S3_FILE_OVERWRITE = False\nAWS_S3_REGION_NAME = \"eu-north-1\"\nAWS_S3_SIGNATURE_VERSION = \"s3v4\"\n# Only set DJANGO_AWS_S3_ENDPOINT_URL if it's defined in environment, fallback to default value in other cases\n# Useful for s3 provided by other parties than AWS, like DO.\nif env.str(\"DJANGO_AWS_S3_ENDPOINT_URL\", default=\"\"):\n    AWS_S3_ENDPOINT_URL = env.str(\"DJANGO_AWS_S3_ENDPOINT_URL\")\n# Should be True unless using s3 provider that doesn't support it (like DO)\nAWS_S3_ENCRYPTION = env.bool(\"DJANGO_AWS_S3_ENCRYPTION\", default=True)",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "AWS_S3_FILE_OVERWRITE",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "AWS_S3_FILE_OVERWRITE = False\nAWS_S3_REGION_NAME = \"eu-north-1\"\nAWS_S3_SIGNATURE_VERSION = \"s3v4\"\n# Only set DJANGO_AWS_S3_ENDPOINT_URL if it's defined in environment, fallback to default value in other cases\n# Useful for s3 provided by other parties than AWS, like DO.\nif env.str(\"DJANGO_AWS_S3_ENDPOINT_URL\", default=\"\"):\n    AWS_S3_ENDPOINT_URL = env.str(\"DJANGO_AWS_S3_ENDPOINT_URL\")\n# Should be True unless using s3 provider that doesn't support it (like DO)\nAWS_S3_ENCRYPTION = env.bool(\"DJANGO_AWS_S3_ENCRYPTION\", default=True)\n# This helps get around a bug in boto3 (https://github.com/boto/boto3/issues/1644)",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "AWS_S3_REGION_NAME",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "AWS_S3_REGION_NAME = \"eu-north-1\"\nAWS_S3_SIGNATURE_VERSION = \"s3v4\"\n# Only set DJANGO_AWS_S3_ENDPOINT_URL if it's defined in environment, fallback to default value in other cases\n# Useful for s3 provided by other parties than AWS, like DO.\nif env.str(\"DJANGO_AWS_S3_ENDPOINT_URL\", default=\"\"):\n    AWS_S3_ENDPOINT_URL = env.str(\"DJANGO_AWS_S3_ENDPOINT_URL\")\n# Should be True unless using s3 provider that doesn't support it (like DO)\nAWS_S3_ENCRYPTION = env.bool(\"DJANGO_AWS_S3_ENCRYPTION\", default=True)\n# This helps get around a bug in boto3 (https://github.com/boto/boto3/issues/1644)\n# Details in https://github.com/jschneier/django-storages/issues/649",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "AWS_S3_SIGNATURE_VERSION",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "AWS_S3_SIGNATURE_VERSION = \"s3v4\"\n# Only set DJANGO_AWS_S3_ENDPOINT_URL if it's defined in environment, fallback to default value in other cases\n# Useful for s3 provided by other parties than AWS, like DO.\nif env.str(\"DJANGO_AWS_S3_ENDPOINT_URL\", default=\"\"):\n    AWS_S3_ENDPOINT_URL = env.str(\"DJANGO_AWS_S3_ENDPOINT_URL\")\n# Should be True unless using s3 provider that doesn't support it (like DO)\nAWS_S3_ENCRYPTION = env.bool(\"DJANGO_AWS_S3_ENCRYPTION\", default=True)\n# This helps get around a bug in boto3 (https://github.com/boto/boto3/issues/1644)\n# Details in https://github.com/jschneier/django-storages/issues/649\nAWS_S3_ADDRESSING_STYLE = \"path\"",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "AWS_S3_ENCRYPTION",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "AWS_S3_ENCRYPTION = env.bool(\"DJANGO_AWS_S3_ENCRYPTION\", default=True)\n# This helps get around a bug in boto3 (https://github.com/boto/boto3/issues/1644)\n# Details in https://github.com/jschneier/django-storages/issues/649\nAWS_S3_ADDRESSING_STYLE = \"path\"\nAWS_S3_OBJECT_PARAMETERS = {\n    \"CacheControl\": \"max-age=1209600\",  # 2 weeks in seconds\n}\n# - {%- endif %}\n# - {% if cookiecutter.django_media_engine == GCS %}\nGS_BUCKET_NAME = \"<unset>\"",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "AWS_S3_ADDRESSING_STYLE",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "AWS_S3_ADDRESSING_STYLE = \"path\"\nAWS_S3_OBJECT_PARAMETERS = {\n    \"CacheControl\": \"max-age=1209600\",  # 2 weeks in seconds\n}\n# - {%- endif %}\n# - {% if cookiecutter.django_media_engine == GCS %}\nGS_BUCKET_NAME = \"<unset>\"\nGS_PROJECT_ID = \"<unset>\"\nGS_CREDENTIALS = \"<unset>\"\nGS_DEFAULT_ACL = \"publicRead\"",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "AWS_S3_OBJECT_PARAMETERS",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "AWS_S3_OBJECT_PARAMETERS = {\n    \"CacheControl\": \"max-age=1209600\",  # 2 weeks in seconds\n}\n# - {%- endif %}\n# - {% if cookiecutter.django_media_engine == GCS %}\nGS_BUCKET_NAME = \"<unset>\"\nGS_PROJECT_ID = \"<unset>\"\nGS_CREDENTIALS = \"<unset>\"\nGS_DEFAULT_ACL = \"publicRead\"\nGS_FILE_OVERWRITE = False",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "GS_BUCKET_NAME",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "GS_BUCKET_NAME = \"<unset>\"\nGS_PROJECT_ID = \"<unset>\"\nGS_CREDENTIALS = \"<unset>\"\nGS_DEFAULT_ACL = \"publicRead\"\nGS_FILE_OVERWRITE = False\nGS_CACHE_CONTROL = \"max-age=1209600\"  # 2 weeks in seconds\n# - {%- endif %}\n# Static files (CSS, JavaScript, images)\nSTATIC_ROOT = \"/files/assets\"\nSTATIC_URL = env.str(\"DJANGO_STATIC_URL\", default=\"/assets/\")",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "GS_PROJECT_ID",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "GS_PROJECT_ID = \"<unset>\"\nGS_CREDENTIALS = \"<unset>\"\nGS_DEFAULT_ACL = \"publicRead\"\nGS_FILE_OVERWRITE = False\nGS_CACHE_CONTROL = \"max-age=1209600\"  # 2 weeks in seconds\n# - {%- endif %}\n# Static files (CSS, JavaScript, images)\nSTATIC_ROOT = \"/files/assets\"\nSTATIC_URL = env.str(\"DJANGO_STATIC_URL\", default=\"/assets/\")\nSTATICFILES_DIRS = (",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "GS_CREDENTIALS",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "GS_CREDENTIALS = \"<unset>\"\nGS_DEFAULT_ACL = \"publicRead\"\nGS_FILE_OVERWRITE = False\nGS_CACHE_CONTROL = \"max-age=1209600\"  # 2 weeks in seconds\n# - {%- endif %}\n# Static files (CSS, JavaScript, images)\nSTATIC_ROOT = \"/files/assets\"\nSTATIC_URL = env.str(\"DJANGO_STATIC_URL\", default=\"/assets/\")\nSTATICFILES_DIRS = (\n    os.path.join(SITE_ROOT, \"static\"),",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "GS_DEFAULT_ACL",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "GS_DEFAULT_ACL = \"publicRead\"\nGS_FILE_OVERWRITE = False\nGS_CACHE_CONTROL = \"max-age=1209600\"  # 2 weeks in seconds\n# - {%- endif %}\n# Static files (CSS, JavaScript, images)\nSTATIC_ROOT = \"/files/assets\"\nSTATIC_URL = env.str(\"DJANGO_STATIC_URL\", default=\"/assets/\")\nSTATICFILES_DIRS = (\n    os.path.join(SITE_ROOT, \"static\"),\n    # - {%- if cookiecutter.frontend_style == WEBAPP %}",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "GS_FILE_OVERWRITE",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "GS_FILE_OVERWRITE = False\nGS_CACHE_CONTROL = \"max-age=1209600\"  # 2 weeks in seconds\n# - {%- endif %}\n# Static files (CSS, JavaScript, images)\nSTATIC_ROOT = \"/files/assets\"\nSTATIC_URL = env.str(\"DJANGO_STATIC_URL\", default=\"/assets/\")\nSTATICFILES_DIRS = (\n    os.path.join(SITE_ROOT, \"static\"),\n    # - {%- if cookiecutter.frontend_style == WEBAPP %}\n    os.path.join(SITE_ROOT, \"webapp\", \"build\"),",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "GS_CACHE_CONTROL",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "GS_CACHE_CONTROL = \"max-age=1209600\"  # 2 weeks in seconds\n# - {%- endif %}\n# Static files (CSS, JavaScript, images)\nSTATIC_ROOT = \"/files/assets\"\nSTATIC_URL = env.str(\"DJANGO_STATIC_URL\", default=\"/assets/\")\nSTATICFILES_DIRS = (\n    os.path.join(SITE_ROOT, \"static\"),\n    # - {%- if cookiecutter.frontend_style == WEBAPP %}\n    os.path.join(SITE_ROOT, \"webapp\", \"build\"),\n    # - {%- endif %}",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "STATIC_ROOT = \"/files/assets\"\nSTATIC_URL = env.str(\"DJANGO_STATIC_URL\", default=\"/assets/\")\nSTATICFILES_DIRS = (\n    os.path.join(SITE_ROOT, \"static\"),\n    # - {%- if cookiecutter.frontend_style == WEBAPP %}\n    os.path.join(SITE_ROOT, \"webapp\", \"build\"),\n    # - {%- endif %}\n)\nSTATICFILES_FINDERS = (\n    \"django.contrib.staticfiles.finders.FileSystemFinder\",",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "STATIC_URL = env.str(\"DJANGO_STATIC_URL\", default=\"/assets/\")\nSTATICFILES_DIRS = (\n    os.path.join(SITE_ROOT, \"static\"),\n    # - {%- if cookiecutter.frontend_style == WEBAPP %}\n    os.path.join(SITE_ROOT, \"webapp\", \"build\"),\n    # - {%- endif %}\n)\nSTATICFILES_FINDERS = (\n    \"django.contrib.staticfiles.finders.FileSystemFinder\",\n    \"django.contrib.staticfiles.finders.AppDirectoriesFinder\",",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "STATICFILES_DIRS = (\n    os.path.join(SITE_ROOT, \"static\"),\n    # - {%- if cookiecutter.frontend_style == WEBAPP %}\n    os.path.join(SITE_ROOT, \"webapp\", \"build\"),\n    # - {%- endif %}\n)\nSTATICFILES_FINDERS = (\n    \"django.contrib.staticfiles.finders.FileSystemFinder\",\n    \"django.contrib.staticfiles.finders.AppDirectoriesFinder\",\n)",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "STATICFILES_FINDERS",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "STATICFILES_FINDERS = (\n    \"django.contrib.staticfiles.finders.FileSystemFinder\",\n    \"django.contrib.staticfiles.finders.AppDirectoriesFinder\",\n)\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = env.str(\"DJANGO_SECRET_KEY\", default=\"dummy key\")\nAUTH_USER_MODEL = \"accounts.User\"\n# Static site url, used when we need absolute url but lack request object, e.g. in email sending.\n# - {%- if cookiecutter.frontend_style == WEBAPP %}\nSITE_URL = env.str(\"DJANGO_SITE_URL\", default=\"http://127.0.0.1:8000\")",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "SECRET_KEY = env.str(\"DJANGO_SECRET_KEY\", default=\"dummy key\")\nAUTH_USER_MODEL = \"accounts.User\"\n# Static site url, used when we need absolute url but lack request object, e.g. in email sending.\n# - {%- if cookiecutter.frontend_style == WEBAPP %}\nSITE_URL = env.str(\"DJANGO_SITE_URL\", default=\"http://127.0.0.1:8000\")\nALLOWED_HOSTS = env.list(\"DJANGO_ALLOWED_HOSTS\", default=[])\n# - {% elif  cookiecutter.frontend_style == SPA %}\nSITE_URL = env.str(\"RAZZLE_SITE_URL\", default=\"http://127.0.0.1:8000\")\nDJANGO_SITE_URL = env.str(\"RAZZLE_BACKEND_SITE_URL\", default=\"http://127.0.0.1:3000\")\nALLOWED_HOSTS = env.list(",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "AUTH_USER_MODEL = \"accounts.User\"\n# Static site url, used when we need absolute url but lack request object, e.g. in email sending.\n# - {%- if cookiecutter.frontend_style == WEBAPP %}\nSITE_URL = env.str(\"DJANGO_SITE_URL\", default=\"http://127.0.0.1:8000\")\nALLOWED_HOSTS = env.list(\"DJANGO_ALLOWED_HOSTS\", default=[])\n# - {% elif  cookiecutter.frontend_style == SPA %}\nSITE_URL = env.str(\"RAZZLE_SITE_URL\", default=\"http://127.0.0.1:8000\")\nDJANGO_SITE_URL = env.str(\"RAZZLE_BACKEND_SITE_URL\", default=\"http://127.0.0.1:3000\")\nALLOWED_HOSTS = env.list(\n    \"DJANGO_ALLOWED_HOSTS\", default=[\"django\", \"localhost\", \"127.0.0.1\"]",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "SITE_URL",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "SITE_URL = env.str(\"DJANGO_SITE_URL\", default=\"http://127.0.0.1:8000\")\nALLOWED_HOSTS = env.list(\"DJANGO_ALLOWED_HOSTS\", default=[])\n# - {% elif  cookiecutter.frontend_style == SPA %}\nSITE_URL = env.str(\"RAZZLE_SITE_URL\", default=\"http://127.0.0.1:8000\")\nDJANGO_SITE_URL = env.str(\"RAZZLE_BACKEND_SITE_URL\", default=\"http://127.0.0.1:3000\")\nALLOWED_HOSTS = env.list(\n    \"DJANGO_ALLOWED_HOSTS\", default=[\"django\", \"localhost\", \"127.0.0.1\"]\n)\nCSRF_TRUSTED_ORIGINS = [\n    f\"http://{host}\"",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "ALLOWED_HOSTS = env.list(\"DJANGO_ALLOWED_HOSTS\", default=[])\n# - {% elif  cookiecutter.frontend_style == SPA %}\nSITE_URL = env.str(\"RAZZLE_SITE_URL\", default=\"http://127.0.0.1:8000\")\nDJANGO_SITE_URL = env.str(\"RAZZLE_BACKEND_SITE_URL\", default=\"http://127.0.0.1:3000\")\nALLOWED_HOSTS = env.list(\n    \"DJANGO_ALLOWED_HOSTS\", default=[\"django\", \"localhost\", \"127.0.0.1\"]\n)\nCSRF_TRUSTED_ORIGINS = [\n    f\"http://{host}\"\n    for host in env.list(\"DJANGO_CSRF_TRUSTED_ORIGINS\", default=ALLOWED_HOSTS)",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "SITE_URL",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "SITE_URL = env.str(\"RAZZLE_SITE_URL\", default=\"http://127.0.0.1:8000\")\nDJANGO_SITE_URL = env.str(\"RAZZLE_BACKEND_SITE_URL\", default=\"http://127.0.0.1:3000\")\nALLOWED_HOSTS = env.list(\n    \"DJANGO_ALLOWED_HOSTS\", default=[\"django\", \"localhost\", \"127.0.0.1\"]\n)\nCSRF_TRUSTED_ORIGINS = [\n    f\"http://{host}\"\n    for host in env.list(\"DJANGO_CSRF_TRUSTED_ORIGINS\", default=ALLOWED_HOSTS)\n] + [SITE_URL]\nCORS_ORIGIN_WHITELIST = [",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "DJANGO_SITE_URL",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "DJANGO_SITE_URL = env.str(\"RAZZLE_BACKEND_SITE_URL\", default=\"http://127.0.0.1:3000\")\nALLOWED_HOSTS = env.list(\n    \"DJANGO_ALLOWED_HOSTS\", default=[\"django\", \"localhost\", \"127.0.0.1\"]\n)\nCSRF_TRUSTED_ORIGINS = [\n    f\"http://{host}\"\n    for host in env.list(\"DJANGO_CSRF_TRUSTED_ORIGINS\", default=ALLOWED_HOSTS)\n] + [SITE_URL]\nCORS_ORIGIN_WHITELIST = [\n    f\"http://{host}\"",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "ALLOWED_HOSTS = env.list(\n    \"DJANGO_ALLOWED_HOSTS\", default=[\"django\", \"localhost\", \"127.0.0.1\"]\n)\nCSRF_TRUSTED_ORIGINS = [\n    f\"http://{host}\"\n    for host in env.list(\"DJANGO_CSRF_TRUSTED_ORIGINS\", default=ALLOWED_HOSTS)\n] + [SITE_URL]\nCORS_ORIGIN_WHITELIST = [\n    f\"http://{host}\"\n    for host in env.list(\"DJANGO_CORS_ORIGIN_WHITELIST\", default=ALLOWED_HOSTS)",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "CSRF_TRUSTED_ORIGINS",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "CSRF_TRUSTED_ORIGINS = [\n    f\"http://{host}\"\n    for host in env.list(\"DJANGO_CSRF_TRUSTED_ORIGINS\", default=ALLOWED_HOSTS)\n] + [SITE_URL]\nCORS_ORIGIN_WHITELIST = [\n    f\"http://{host}\"\n    for host in env.list(\"DJANGO_CORS_ORIGIN_WHITELIST\", default=ALLOWED_HOSTS)\n] + [SITE_URL]\n# - {%- endif %}\n# Don't allow site's content to be included in frames/iframes.",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "CORS_ORIGIN_WHITELIST",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "CORS_ORIGIN_WHITELIST = [\n    f\"http://{host}\"\n    for host in env.list(\"DJANGO_CORS_ORIGIN_WHITELIST\", default=ALLOWED_HOSTS)\n] + [SITE_URL]\n# - {%- endif %}\n# Don't allow site's content to be included in frames/iframes.\nX_FRAME_OPTIONS = \"DENY\"\nROOT_URLCONF = f\"{PROJECT_NAME}.urls\"\nWSGI_APPLICATION = f\"{PROJECT_NAME}.wsgi.application\"\nLOGIN_REDIRECT_URL = \"/\"",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "X_FRAME_OPTIONS",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "X_FRAME_OPTIONS = \"DENY\"\nROOT_URLCONF = f\"{PROJECT_NAME}.urls\"\nWSGI_APPLICATION = f\"{PROJECT_NAME}.wsgi.application\"\nLOGIN_REDIRECT_URL = \"/\"\n# - {%- if cookiecutter.frontend_style == SPA %}\nLOGIN_URL = \"admin:login\"\nLOGOUT_REDIRECT_URL = \"admin:login\"\n# - {%- else %}\nLOGIN_URL = \"login\"\nLOGOUT_REDIRECT_URL = \"login\"",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "ROOT_URLCONF = f\"{PROJECT_NAME}.urls\"\nWSGI_APPLICATION = f\"{PROJECT_NAME}.wsgi.application\"\nLOGIN_REDIRECT_URL = \"/\"\n# - {%- if cookiecutter.frontend_style == SPA %}\nLOGIN_URL = \"admin:login\"\nLOGOUT_REDIRECT_URL = \"admin:login\"\n# - {%- else %}\nLOGIN_URL = \"login\"\nLOGOUT_REDIRECT_URL = \"login\"\n# - {%- endif %}",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "WSGI_APPLICATION = f\"{PROJECT_NAME}.wsgi.application\"\nLOGIN_REDIRECT_URL = \"/\"\n# - {%- if cookiecutter.frontend_style == SPA %}\nLOGIN_URL = \"admin:login\"\nLOGOUT_REDIRECT_URL = \"admin:login\"\n# - {%- else %}\nLOGIN_URL = \"login\"\nLOGOUT_REDIRECT_URL = \"login\"\n# - {%- endif %}\n# Crispy-forms",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "LOGIN_REDIRECT_URL",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "LOGIN_REDIRECT_URL = \"/\"\n# - {%- if cookiecutter.frontend_style == SPA %}\nLOGIN_URL = \"admin:login\"\nLOGOUT_REDIRECT_URL = \"admin:login\"\n# - {%- else %}\nLOGIN_URL = \"login\"\nLOGOUT_REDIRECT_URL = \"login\"\n# - {%- endif %}\n# Crispy-forms\nCRISPY_TEMPLATE_PACK = \"bootstrap4\"",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "LOGIN_URL",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "LOGIN_URL = \"admin:login\"\nLOGOUT_REDIRECT_URL = \"admin:login\"\n# - {%- else %}\nLOGIN_URL = \"login\"\nLOGOUT_REDIRECT_URL = \"login\"\n# - {%- endif %}\n# Crispy-forms\nCRISPY_TEMPLATE_PACK = \"bootstrap4\"\n# Email config\nDEFAULT_FROM_EMAIL = f\"{PROJECT_TITLE} <info@{{ cookiecutter.domain_name }}>\"",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "LOGOUT_REDIRECT_URL",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "LOGOUT_REDIRECT_URL = \"admin:login\"\n# - {%- else %}\nLOGIN_URL = \"login\"\nLOGOUT_REDIRECT_URL = \"login\"\n# - {%- endif %}\n# Crispy-forms\nCRISPY_TEMPLATE_PACK = \"bootstrap4\"\n# Email config\nDEFAULT_FROM_EMAIL = f\"{PROJECT_TITLE} <info@{{ cookiecutter.domain_name }}>\"\nSERVER_EMAIL = f\"{PROJECT_TITLE} server <server@{{ cookiecutter.domain_name }}>\"",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "LOGIN_URL",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "LOGIN_URL = \"login\"\nLOGOUT_REDIRECT_URL = \"login\"\n# - {%- endif %}\n# Crispy-forms\nCRISPY_TEMPLATE_PACK = \"bootstrap4\"\n# Email config\nDEFAULT_FROM_EMAIL = f\"{PROJECT_TITLE} <info@{{ cookiecutter.domain_name }}>\"\nSERVER_EMAIL = f\"{PROJECT_TITLE} server <server@{{ cookiecutter.domain_name }}>\"\nEMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\nEMAIL_HOST = \"mailhog\"",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "LOGOUT_REDIRECT_URL",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "LOGOUT_REDIRECT_URL = \"login\"\n# - {%- endif %}\n# Crispy-forms\nCRISPY_TEMPLATE_PACK = \"bootstrap4\"\n# Email config\nDEFAULT_FROM_EMAIL = f\"{PROJECT_TITLE} <info@{{ cookiecutter.domain_name }}>\"\nSERVER_EMAIL = f\"{PROJECT_TITLE} server <server@{{ cookiecutter.domain_name }}>\"\nEMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\nEMAIL_HOST = \"mailhog\"\nEMAIL_PORT = 1025",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "CRISPY_TEMPLATE_PACK",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "CRISPY_TEMPLATE_PACK = \"bootstrap4\"\n# Email config\nDEFAULT_FROM_EMAIL = f\"{PROJECT_TITLE} <info@{{ cookiecutter.domain_name }}>\"\nSERVER_EMAIL = f\"{PROJECT_TITLE} server <server@{{ cookiecutter.domain_name }}>\"\nEMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\nEMAIL_HOST = \"mailhog\"\nEMAIL_PORT = 1025\nEMAIL_HOST_USER = \"\"\nEMAIL_HOST_PASSWORD = \"\"\n# Base logging config. Logs INFO and higher-level messages to console. Production-specific additions are in",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "DEFAULT_FROM_EMAIL",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "DEFAULT_FROM_EMAIL = f\"{PROJECT_TITLE} <info@{{ cookiecutter.domain_name }}>\"\nSERVER_EMAIL = f\"{PROJECT_TITLE} server <server@{{ cookiecutter.domain_name }}>\"\nEMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\nEMAIL_HOST = \"mailhog\"\nEMAIL_PORT = 1025\nEMAIL_HOST_USER = \"\"\nEMAIL_HOST_PASSWORD = \"\"\n# Base logging config. Logs INFO and higher-level messages to console. Production-specific additions are in\n#  production.py.\n#  Notably we modify existing Django loggers to propagate and delegate their logging to the root handler, so that we",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "SERVER_EMAIL",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "SERVER_EMAIL = f\"{PROJECT_TITLE} server <server@{{ cookiecutter.domain_name }}>\"\nEMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\nEMAIL_HOST = \"mailhog\"\nEMAIL_PORT = 1025\nEMAIL_HOST_USER = \"\"\nEMAIL_HOST_PASSWORD = \"\"\n# Base logging config. Logs INFO and higher-level messages to console. Production-specific additions are in\n#  production.py.\n#  Notably we modify existing Django loggers to propagate and delegate their logging to the root handler, so that we\n#  only have to configure the root handler.",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "EMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\nEMAIL_HOST = \"mailhog\"\nEMAIL_PORT = 1025\nEMAIL_HOST_USER = \"\"\nEMAIL_HOST_PASSWORD = \"\"\n# Base logging config. Logs INFO and higher-level messages to console. Production-specific additions are in\n#  production.py.\n#  Notably we modify existing Django loggers to propagate and delegate their logging to the root handler, so that we\n#  only have to configure the root handler.\nLOGGING: Dict[str, Any] = {",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "EMAIL_HOST = \"mailhog\"\nEMAIL_PORT = 1025\nEMAIL_HOST_USER = \"\"\nEMAIL_HOST_PASSWORD = \"\"\n# Base logging config. Logs INFO and higher-level messages to console. Production-specific additions are in\n#  production.py.\n#  Notably we modify existing Django loggers to propagate and delegate their logging to the root handler, so that we\n#  only have to configure the root handler.\nLOGGING: Dict[str, Any] = {\n    \"version\": 1,",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "EMAIL_PORT = 1025\nEMAIL_HOST_USER = \"\"\nEMAIL_HOST_PASSWORD = \"\"\n# Base logging config. Logs INFO and higher-level messages to console. Production-specific additions are in\n#  production.py.\n#  Notably we modify existing Django loggers to propagate and delegate their logging to the root handler, so that we\n#  only have to configure the root handler.\nLOGGING: Dict[str, Any] = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "EMAIL_HOST_USER = \"\"\nEMAIL_HOST_PASSWORD = \"\"\n# Base logging config. Logs INFO and higher-level messages to console. Production-specific additions are in\n#  production.py.\n#  Notably we modify existing Django loggers to propagate and delegate their logging to the root handler, so that we\n#  only have to configure the root handler.\nLOGGING: Dict[str, Any] = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"formatters\": {",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "EMAIL_HOST_PASSWORD = \"\"\n# Base logging config. Logs INFO and higher-level messages to console. Production-specific additions are in\n#  production.py.\n#  Notably we modify existing Django loggers to propagate and delegate their logging to the root handler, so that we\n#  only have to configure the root handler.\nLOGGING: Dict[str, Any] = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"formatters\": {\n        \"default\": {",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "TEST_RUNNER",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "TEST_RUNNER = \"django.test.runner.DiscoverRunner\"\n# Disable a few system checks. Careful with these, only silence what your really really don't need.\n# TODO: check if this is right for your project.\nSILENCED_SYSTEM_CHECKS = [\n    \"security.W001\",  # we don't use SecurityMiddleware since security is better applied in nginx config\n]\n# - {%- if cookiecutter.frontend_style == SPA %}\n# Rest framework configuration\nREST_FRAMEWORK = {\n    # Disable Basic auth",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "SILENCED_SYSTEM_CHECKS",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "SILENCED_SYSTEM_CHECKS = [\n    \"security.W001\",  # we don't use SecurityMiddleware since security is better applied in nginx config\n]\n# - {%- if cookiecutter.frontend_style == SPA %}\n# Rest framework configuration\nREST_FRAMEWORK = {\n    # Disable Basic auth\n    \"DEFAULT_AUTHENTICATION_CLASSES\": (\n        \"rest_framework_simplejwt.authentication.JWTAuthentication\",\n        # By default api session authentication is not used",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "REST_FRAMEWORK = {\n    # Disable Basic auth\n    \"DEFAULT_AUTHENTICATION_CLASSES\": (\n        \"rest_framework_simplejwt.authentication.JWTAuthentication\",\n        # By default api session authentication is not used\n        # \"rest_framework.authentication.SessionAuthentication\",\n    ),\n    \"DEFAULT_FILTER_BACKENDS\": (\"django_filters.rest_framework.DjangoFilterBackend\",),\n    # Change default full-url media files to be only stored path, needs /media prepended in frontend\n    \"UPLOADED_FILES_USE_URL\": False,",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "SENTRY_DSN",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "SENTRY_DSN = env.str(\"DJANGO_SENTRY_DSN\", default=\"\")\nSENTRY_ENVIRONMENT = env.str(\"DJANGO_SENTRY_ENVIRONMENT\", default=\"local\")\nif SENTRY_DSN and not IS_DOCKER_BUILD:\n    import sentry_sdk  # NOQA\n    from sentry_sdk.integrations.django import DjangoIntegration  # NOQA\n    sentry_sdk.init(\n        dsn=SENTRY_DSN,\n        integrations=[DjangoIntegration()],\n        environment=SENTRY_ENVIRONMENT,\n        # Send authenticated user information with sentry events (needs django.contrib.auth)",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "SENTRY_ENVIRONMENT",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "SENTRY_ENVIRONMENT = env.str(\"DJANGO_SENTRY_ENVIRONMENT\", default=\"local\")\nif SENTRY_DSN and not IS_DOCKER_BUILD:\n    import sentry_sdk  # NOQA\n    from sentry_sdk.integrations.django import DjangoIntegration  # NOQA\n    sentry_sdk.init(\n        dsn=SENTRY_DSN,\n        integrations=[DjangoIntegration()],\n        environment=SENTRY_ENVIRONMENT,\n        # Send authenticated user information with sentry events (needs django.contrib.auth)\n        send_default_pii=True,",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "WEBPACK_LOADER",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "WEBPACK_LOADER = {\n    \"DEFAULT\": {\n        \"BUNDLE_DIR_NAME\": \"\",\n        \"STATS_FILE\": os.path.join(SITE_ROOT, \"webapp\", \"webpack-stats.json\"),\n    },\n}\n# All these settings will be made available to javascript app\nSETTINGS_EXPORT = [\n    \"DEBUG\",\n    \"SITE_URL\",",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "SETTINGS_EXPORT",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "SETTINGS_EXPORT = [\n    \"DEBUG\",\n    \"SITE_URL\",\n    \"STATIC_URL\",\n    \"SENTRY_DSN\",\n    \"SENTRY_ENVIRONMENT\",\n    \"PROJECT_TITLE\",\n]\n# django-js-reverse\nREVERSEJS_VAR_NAME = \"reverse\"",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "REVERSEJS_VAR_NAME",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "REVERSEJS_VAR_NAME = \"reverse\"\nREVERSEJS_GLOBAL_OBJECT_NAME = \"DJ_CONST\"\nREVERSEJS_EXCLUDE_NAMESPACES = [\"admin\", \"djdt\"]\n# - {%- else %}\nSIMPLE_JWT = {\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(minutes=30),\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=7),\n    \"ROTATE_REFRESH_TOKENS\": True,\n    \"ALGORITHM\": \"HS256\",\n    \"SIGNING_KEY\": SECRET_KEY,",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "REVERSEJS_GLOBAL_OBJECT_NAME",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "REVERSEJS_GLOBAL_OBJECT_NAME = \"DJ_CONST\"\nREVERSEJS_EXCLUDE_NAMESPACES = [\"admin\", \"djdt\"]\n# - {%- else %}\nSIMPLE_JWT = {\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(minutes=30),\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=7),\n    \"ROTATE_REFRESH_TOKENS\": True,\n    \"ALGORITHM\": \"HS256\",\n    \"SIGNING_KEY\": SECRET_KEY,\n    \"AUTH_HEADER_TYPES\": (\"Bearer\",),",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "REVERSEJS_EXCLUDE_NAMESPACES",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "REVERSEJS_EXCLUDE_NAMESPACES = [\"admin\", \"djdt\"]\n# - {%- else %}\nSIMPLE_JWT = {\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(minutes=30),\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=7),\n    \"ROTATE_REFRESH_TOKENS\": True,\n    \"ALGORITHM\": \"HS256\",\n    \"SIGNING_KEY\": SECRET_KEY,\n    \"AUTH_HEADER_TYPES\": (\"Bearer\",),\n    \"USER_ID_FIELD\": \"pk\",",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "SIMPLE_JWT = {\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(minutes=30),\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=7),\n    \"ROTATE_REFRESH_TOKENS\": True,\n    \"ALGORITHM\": \"HS256\",\n    \"SIGNING_KEY\": SECRET_KEY,\n    \"AUTH_HEADER_TYPES\": (\"Bearer\",),\n    \"USER_ID_FIELD\": \"pk\",\n    \"USER_ID_CLAIM\": \"user_id\",\n}",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "CORS_ORIGIN_ALLOW_ALL",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "CORS_ORIGIN_ALLOW_ALL = True\nCORS_ALLOW_CREDENTIALS = True\n# - {%- endif %}\n# Health-check related\nHEALTH_CHECK_ACCESS_TOKEN = env.str(\n    \"DJANGO_HEALTH_CHECK_ACCESS_TOKEN\", default=PROJECT_NAME,\n)\n# - {%- if cookiecutter.include_celery == YES %}\nHEALTH_CHECK = {\n    # For 'tg_utils.health_check.checks.celery_beat'",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_CREDENTIALS",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "CORS_ALLOW_CREDENTIALS = True\n# - {%- endif %}\n# Health-check related\nHEALTH_CHECK_ACCESS_TOKEN = env.str(\n    \"DJANGO_HEALTH_CHECK_ACCESS_TOKEN\", default=PROJECT_NAME,\n)\n# - {%- if cookiecutter.include_celery == YES %}\nHEALTH_CHECK = {\n    # For 'tg_utils.health_check.checks.celery_beat'\n    \"CELERY_APP\": f\"{PROJECT_NAME}.celery.app\",",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "HEALTH_CHECK_ACCESS_TOKEN",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "HEALTH_CHECK_ACCESS_TOKEN = env.str(\n    \"DJANGO_HEALTH_CHECK_ACCESS_TOKEN\", default=PROJECT_NAME,\n)\n# - {%- if cookiecutter.include_celery == YES %}\nHEALTH_CHECK = {\n    # For 'tg_utils.health_check.checks.celery_beat'\n    \"CELERY_APP\": f\"{PROJECT_NAME}.celery.app\",\n    # Schedule timestamping task every minute\n    \"CELERY_BEAT_CHECK_INTERVAL\": 60,\n    # It is okay if the task is delayed no more than 5 minutes",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "HEALTH_CHECK",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "peekOfCode": "HEALTH_CHECK = {\n    # For 'tg_utils.health_check.checks.celery_beat'\n    \"CELERY_APP\": f\"{PROJECT_NAME}.celery.app\",\n    # Schedule timestamping task every minute\n    \"CELERY_BEAT_CHECK_INTERVAL\": 60,\n    # It is okay if the task is delayed no more than 5 minutes\n    \"CELERY_BEAT_DELAY_THRESHOLD\": 5 * 60,\n}\n# - {%- endif %}",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.base",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "peekOfCode": "DEBUG = False\nif not IS_DOCKER_BUILD:\n    # Static site url, used when we need absolute url but lack request object, e.g. in email sending.\n    # - {%- if cookiecutter.frontend_style == WEBAPP %}\n    SITE_URL = env.str(\"DJANGO_SITE_URL\")\n    # - {%- elif cookiecutter.frontend_style == SPA %}\n    SITE_URL = env.str(\"RAZZLE_SITE_URL\")\n    DJANGO_SITE_URL = env.str(\"RAZZLE_BACKEND_SITE_URL\")\n    CSRF_COOKIE_DOMAIN = env.str(\"DJANGO_CSRF_COOKIE_DOMAIN\")\nCSRF_TRUSTED_ORIGINS = [",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "documentation": {}
    },
    {
        "label": "CSRF_TRUSTED_ORIGINS",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "peekOfCode": "CSRF_TRUSTED_ORIGINS = [\n    f\"https://{host}\"\n    for host in env.list(\"DJANGO_CSRF_TRUSTED_ORIGINS\", default=ALLOWED_HOSTS)\n]\n# CORS overrides\nCORS_ORIGIN_ALLOW_ALL = False\nCORS_EXPOSE_HEADERS = default_headers\nCORS_ORIGIN_WHITELIST = [\n    f\"https://{host}\"\n    for host in env.list(\"DJANGO_CORS_ORIGIN_WHITELIST\", default=ALLOWED_HOSTS)",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "documentation": {}
    },
    {
        "label": "CORS_ORIGIN_ALLOW_ALL",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "peekOfCode": "CORS_ORIGIN_ALLOW_ALL = False\nCORS_EXPOSE_HEADERS = default_headers\nCORS_ORIGIN_WHITELIST = [\n    f\"https://{host}\"\n    for host in env.list(\"DJANGO_CORS_ORIGIN_WHITELIST\", default=ALLOWED_HOSTS)\n]\n# - {% endif %}\nEMAIL_HOST = env.str(\"DJANGO_EMAIL_HOST\", default=\"smtp.sparkpostmail.com\")\nEMAIL_PORT = env.int(\"DJANGO_EMAIL_PORT\", default=587)\nEMAIL_HOST_USER = env.str(\"DJANGO_EMAIL_HOST_USER\", default=\"SMTP_Injection\")",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "documentation": {}
    },
    {
        "label": "CORS_EXPOSE_HEADERS",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "peekOfCode": "CORS_EXPOSE_HEADERS = default_headers\nCORS_ORIGIN_WHITELIST = [\n    f\"https://{host}\"\n    for host in env.list(\"DJANGO_CORS_ORIGIN_WHITELIST\", default=ALLOWED_HOSTS)\n]\n# - {% endif %}\nEMAIL_HOST = env.str(\"DJANGO_EMAIL_HOST\", default=\"smtp.sparkpostmail.com\")\nEMAIL_PORT = env.int(\"DJANGO_EMAIL_PORT\", default=587)\nEMAIL_HOST_USER = env.str(\"DJANGO_EMAIL_HOST_USER\", default=\"SMTP_Injection\")\nEMAIL_HOST_PASSWORD = env.str(\"DJANGO_EMAIL_HOST_PASSWORD\", default=\"TODO (api key)\")",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "documentation": {}
    },
    {
        "label": "CORS_ORIGIN_WHITELIST",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "peekOfCode": "CORS_ORIGIN_WHITELIST = [\n    f\"https://{host}\"\n    for host in env.list(\"DJANGO_CORS_ORIGIN_WHITELIST\", default=ALLOWED_HOSTS)\n]\n# - {% endif %}\nEMAIL_HOST = env.str(\"DJANGO_EMAIL_HOST\", default=\"smtp.sparkpostmail.com\")\nEMAIL_PORT = env.int(\"DJANGO_EMAIL_PORT\", default=587)\nEMAIL_HOST_USER = env.str(\"DJANGO_EMAIL_HOST_USER\", default=\"SMTP_Injection\")\nEMAIL_HOST_PASSWORD = env.str(\"DJANGO_EMAIL_HOST_PASSWORD\", default=\"TODO (api key)\")\nSTATIC_URL = env.str(\"DJANGO_STATIC_URL\", default=\"/assets/\")",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "peekOfCode": "EMAIL_HOST = env.str(\"DJANGO_EMAIL_HOST\", default=\"smtp.sparkpostmail.com\")\nEMAIL_PORT = env.int(\"DJANGO_EMAIL_PORT\", default=587)\nEMAIL_HOST_USER = env.str(\"DJANGO_EMAIL_HOST_USER\", default=\"SMTP_Injection\")\nEMAIL_HOST_PASSWORD = env.str(\"DJANGO_EMAIL_HOST_PASSWORD\", default=\"TODO (api key)\")\nSTATIC_URL = env.str(\"DJANGO_STATIC_URL\", default=\"/assets/\")\n# Production logging - all INFO and higher messages go to info.log file.\n# ERROR and higher messages additionally go to error.log file\nLOGGING[\"loggers\"][\"\"] = {\n    \"handlers\": [\"console\"],\n    \"level\": \"INFO\",",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "peekOfCode": "EMAIL_PORT = env.int(\"DJANGO_EMAIL_PORT\", default=587)\nEMAIL_HOST_USER = env.str(\"DJANGO_EMAIL_HOST_USER\", default=\"SMTP_Injection\")\nEMAIL_HOST_PASSWORD = env.str(\"DJANGO_EMAIL_HOST_PASSWORD\", default=\"TODO (api key)\")\nSTATIC_URL = env.str(\"DJANGO_STATIC_URL\", default=\"/assets/\")\n# Production logging - all INFO and higher messages go to info.log file.\n# ERROR and higher messages additionally go to error.log file\nLOGGING[\"loggers\"][\"\"] = {\n    \"handlers\": [\"console\"],\n    \"level\": \"INFO\",\n    \"filters\": [\"require_debug_false\"],",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "peekOfCode": "EMAIL_HOST_USER = env.str(\"DJANGO_EMAIL_HOST_USER\", default=\"SMTP_Injection\")\nEMAIL_HOST_PASSWORD = env.str(\"DJANGO_EMAIL_HOST_PASSWORD\", default=\"TODO (api key)\")\nSTATIC_URL = env.str(\"DJANGO_STATIC_URL\", default=\"/assets/\")\n# Production logging - all INFO and higher messages go to info.log file.\n# ERROR and higher messages additionally go to error.log file\nLOGGING[\"loggers\"][\"\"] = {\n    \"handlers\": [\"console\"],\n    \"level\": \"INFO\",\n    \"filters\": [\"require_debug_false\"],\n}",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "peekOfCode": "EMAIL_HOST_PASSWORD = env.str(\"DJANGO_EMAIL_HOST_PASSWORD\", default=\"TODO (api key)\")\nSTATIC_URL = env.str(\"DJANGO_STATIC_URL\", default=\"/assets/\")\n# Production logging - all INFO and higher messages go to info.log file.\n# ERROR and higher messages additionally go to error.log file\nLOGGING[\"loggers\"][\"\"] = {\n    \"handlers\": [\"console\"],\n    \"level\": \"INFO\",\n    \"filters\": [\"require_debug_false\"],\n}\nif env.str(\"DJANGO_DISABLE_FILE_LOGGING\", default=\"n\") != \"y\":",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "peekOfCode": "STATIC_URL = env.str(\"DJANGO_STATIC_URL\", default=\"/assets/\")\n# Production logging - all INFO and higher messages go to info.log file.\n# ERROR and higher messages additionally go to error.log file\nLOGGING[\"loggers\"][\"\"] = {\n    \"handlers\": [\"console\"],\n    \"level\": \"INFO\",\n    \"filters\": [\"require_debug_false\"],\n}\nif env.str(\"DJANGO_DISABLE_FILE_LOGGING\", default=\"n\") != \"y\":\n    # Add file handlers",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "documentation": {}
    },
    {
        "label": "LOGGING[\"loggers\"][\"\"]",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "peekOfCode": "LOGGING[\"loggers\"][\"\"] = {\n    \"handlers\": [\"console\"],\n    \"level\": \"INFO\",\n    \"filters\": [\"require_debug_false\"],\n}\nif env.str(\"DJANGO_DISABLE_FILE_LOGGING\", default=\"n\") != \"y\":\n    # Add file handlers\n    LOGGING[\"handlers\"].update(\n        {\n            \"info_log\": {",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "documentation": {}
    },
    {
        "label": "DEFAULT_FILE_STORAGE",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "peekOfCode": "DEFAULT_FILE_STORAGE = f\"{PROJECT_NAME}.storages.MediaStorage\"\nMEDIA_ROOT = env.str(\"DJANGO_MEDIA_ROOT\", default=\"\")\n# - {% if cookiecutter.django_media_engine == S3 %}\nAWS_STORAGE_BUCKET_NAME = env.str(\n    \"DJANGO_AWS_STORAGE_BUCKET_NAME\", default=f\"{PROJECT_NAME}-TODO\"\n)\nAWS_ACCESS_KEY_ID = env.str(\"DJANGO_AWS_ACCESS_KEY_ID\", default=\"***UNSET***\")\nAWS_SECRET_ACCESS_KEY = env.str(\"DJANGO_AWS_SECRET_ACCESS_KEY\", default=\"***UNSET***\")\n# - {% elif cookiecutter.django_media_engine == GCS %}\nGS_BUCKET_NAME = env.str(\"DJANGO_GS_BUCKET_NAME\", default=f\"{PROJECT_NAME}-TODO\")",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "peekOfCode": "MEDIA_ROOT = env.str(\"DJANGO_MEDIA_ROOT\", default=\"\")\n# - {% if cookiecutter.django_media_engine == S3 %}\nAWS_STORAGE_BUCKET_NAME = env.str(\n    \"DJANGO_AWS_STORAGE_BUCKET_NAME\", default=f\"{PROJECT_NAME}-TODO\"\n)\nAWS_ACCESS_KEY_ID = env.str(\"DJANGO_AWS_ACCESS_KEY_ID\", default=\"***UNSET***\")\nAWS_SECRET_ACCESS_KEY = env.str(\"DJANGO_AWS_SECRET_ACCESS_KEY\", default=\"***UNSET***\")\n# - {% elif cookiecutter.django_media_engine == GCS %}\nGS_BUCKET_NAME = env.str(\"DJANGO_GS_BUCKET_NAME\", default=f\"{PROJECT_NAME}-TODO\")\nGS_PROJECT_ID = env.str(\"DJANGO_GS_PROJECT_ID\", default=\"***UNSET***\")",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "documentation": {}
    },
    {
        "label": "AWS_STORAGE_BUCKET_NAME",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "peekOfCode": "AWS_STORAGE_BUCKET_NAME = env.str(\n    \"DJANGO_AWS_STORAGE_BUCKET_NAME\", default=f\"{PROJECT_NAME}-TODO\"\n)\nAWS_ACCESS_KEY_ID = env.str(\"DJANGO_AWS_ACCESS_KEY_ID\", default=\"***UNSET***\")\nAWS_SECRET_ACCESS_KEY = env.str(\"DJANGO_AWS_SECRET_ACCESS_KEY\", default=\"***UNSET***\")\n# - {% elif cookiecutter.django_media_engine == GCS %}\nGS_BUCKET_NAME = env.str(\"DJANGO_GS_BUCKET_NAME\", default=f\"{PROJECT_NAME}-TODO\")\nGS_PROJECT_ID = env.str(\"DJANGO_GS_PROJECT_ID\", default=\"***UNSET***\")\nfrom google.oauth2 import service_account  # NOQA\nGS_CREDENTIALS = service_account.Credentials.from_service_account_info(",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "documentation": {}
    },
    {
        "label": "AWS_ACCESS_KEY_ID",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "peekOfCode": "AWS_ACCESS_KEY_ID = env.str(\"DJANGO_AWS_ACCESS_KEY_ID\", default=\"***UNSET***\")\nAWS_SECRET_ACCESS_KEY = env.str(\"DJANGO_AWS_SECRET_ACCESS_KEY\", default=\"***UNSET***\")\n# - {% elif cookiecutter.django_media_engine == GCS %}\nGS_BUCKET_NAME = env.str(\"DJANGO_GS_BUCKET_NAME\", default=f\"{PROJECT_NAME}-TODO\")\nGS_PROJECT_ID = env.str(\"DJANGO_GS_PROJECT_ID\", default=\"***UNSET***\")\nfrom google.oauth2 import service_account  # NOQA\nGS_CREDENTIALS = service_account.Credentials.from_service_account_info(\n    json.load(env.str(\"DJANGO_GS_CREDENTIALS\", default=\"{}\")),\n)\n# - {% endif %}",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "documentation": {}
    },
    {
        "label": "AWS_SECRET_ACCESS_KEY",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "peekOfCode": "AWS_SECRET_ACCESS_KEY = env.str(\"DJANGO_AWS_SECRET_ACCESS_KEY\", default=\"***UNSET***\")\n# - {% elif cookiecutter.django_media_engine == GCS %}\nGS_BUCKET_NAME = env.str(\"DJANGO_GS_BUCKET_NAME\", default=f\"{PROJECT_NAME}-TODO\")\nGS_PROJECT_ID = env.str(\"DJANGO_GS_PROJECT_ID\", default=\"***UNSET***\")\nfrom google.oauth2 import service_account  # NOQA\nGS_CREDENTIALS = service_account.Credentials.from_service_account_info(\n    json.load(env.str(\"DJANGO_GS_CREDENTIALS\", default=\"{}\")),\n)\n# - {% endif %}",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "documentation": {}
    },
    {
        "label": "GS_BUCKET_NAME",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "peekOfCode": "GS_BUCKET_NAME = env.str(\"DJANGO_GS_BUCKET_NAME\", default=f\"{PROJECT_NAME}-TODO\")\nGS_PROJECT_ID = env.str(\"DJANGO_GS_PROJECT_ID\", default=\"***UNSET***\")\nfrom google.oauth2 import service_account  # NOQA\nGS_CREDENTIALS = service_account.Credentials.from_service_account_info(\n    json.load(env.str(\"DJANGO_GS_CREDENTIALS\", default=\"{}\")),\n)\n# - {% endif %}",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "documentation": {}
    },
    {
        "label": "GS_PROJECT_ID",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "peekOfCode": "GS_PROJECT_ID = env.str(\"DJANGO_GS_PROJECT_ID\", default=\"***UNSET***\")\nfrom google.oauth2 import service_account  # NOQA\nGS_CREDENTIALS = service_account.Credentials.from_service_account_info(\n    json.load(env.str(\"DJANGO_GS_CREDENTIALS\", default=\"{}\")),\n)\n# - {% endif %}",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "documentation": {}
    },
    {
        "label": "GS_CREDENTIALS",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "peekOfCode": "GS_CREDENTIALS = service_account.Credentials.from_service_account_info(\n    json.load(env.str(\"DJANGO_GS_CREDENTIALS\", default=\"{}\")),\n)\n# - {% endif %}",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.cloud",
        "documentation": {}
    },
    {
        "label": "IS_UNITTEST",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.test",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.test",
        "peekOfCode": "IS_UNITTEST = True\nSEND_EMAILS = False\nDATABASES[\"default\"][\"TEST\"] = {\n    \"NAME\": \"{{ cookiecutter.repo_name }}_test\",\n}\nEMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\"\n# - {%- if cookiecutter.frontend_style == SPA %}\n# Use session in tests to make api login easier\nREST_FRAMEWORK[\"DEFAULT_AUTHENTICATION_CLASSES\"] = (\n    \"rest_framework.authentication.SessionAuthentication\",",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.test",
        "documentation": {}
    },
    {
        "label": "SEND_EMAILS",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.test",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.test",
        "peekOfCode": "SEND_EMAILS = False\nDATABASES[\"default\"][\"TEST\"] = {\n    \"NAME\": \"{{ cookiecutter.repo_name }}_test\",\n}\nEMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\"\n# - {%- if cookiecutter.frontend_style == SPA %}\n# Use session in tests to make api login easier\nREST_FRAMEWORK[\"DEFAULT_AUTHENTICATION_CLASSES\"] = (\n    \"rest_framework.authentication.SessionAuthentication\",\n)",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.test",
        "documentation": {}
    },
    {
        "label": "DATABASES[\"default\"][\"TEST\"]",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.test",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.test",
        "peekOfCode": "DATABASES[\"default\"][\"TEST\"] = {\n    \"NAME\": \"{{ cookiecutter.repo_name }}_test\",\n}\nEMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\"\n# - {%- if cookiecutter.frontend_style == SPA %}\n# Use session in tests to make api login easier\nREST_FRAMEWORK[\"DEFAULT_AUTHENTICATION_CLASSES\"] = (\n    \"rest_framework.authentication.SessionAuthentication\",\n)\n# - {% endif %}",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.test",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.test",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.test",
        "peekOfCode": "EMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\"\n# - {%- if cookiecutter.frontend_style == SPA %}\n# Use session in tests to make api login easier\nREST_FRAMEWORK[\"DEFAULT_AUTHENTICATION_CLASSES\"] = (\n    \"rest_framework.authentication.SessionAuthentication\",\n)\n# - {% endif %}",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.test",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK[\"DEFAULT_AUTHENTICATION_CLASSES\"]",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.test",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.test",
        "peekOfCode": "REST_FRAMEWORK[\"DEFAULT_AUTHENTICATION_CLASSES\"] = (\n    \"rest_framework.authentication.SessionAuthentication\",\n)\n# - {% endif %}",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.test",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.test_cypress",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.test_cypress",
        "peekOfCode": "ALLOWED_HOSTS = \"*\"",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.settings.test_cypress",
        "documentation": {}
    },
    {
        "label": "SettingsEncoder",
        "kind": 6,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.management.commands.settings",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.management.commands.settings",
        "peekOfCode": "class SettingsEncoder(json.JSONEncoder):\n    def default(self, o):\n        if isinstance(o, set):\n            return list(o)\n        if environ and isinstance(o, environ.Path):\n            return str(o)\n        # Let the base class default method raise the TypeError\n        return json.JSONEncoder.default(self, o)\nclass Command(BaseCommand):\n    help = \"Returns settings dumped as JSON\"",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.management.commands.settings",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.management.commands.settings",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.management.commands.settings",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Returns settings dumped as JSON\"\n    def add_arguments(self, parser):\n        parser.add_argument(\"--keys\", nargs=\"+\", required=False)\n    def handle(self, *args, **options):\n        settings_as_dict = (\n            settings._wrapped.__dict__  # type: ignore  # pylint: disable=protected-access\n        )\n        if options[\"keys\"]:\n            settings_as_dict = {",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.management.commands.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.rest.urls",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.rest.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"auth/\", include(\"accounts.jwt.urls\")),\n    path(\"user/\", include(\"accounts.rest.urls\")),\n]",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.rest.urls",
        "documentation": {}
    },
    {
        "label": "test_for_missing_migrations",
        "kind": 2,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tests.test_django",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tests.test_django",
        "peekOfCode": "def test_for_missing_migrations():\n    output = StringIO()\n    try:\n        call_command(\n            \"makemigrations\", interactive=False, dry_run=True, check=True, stdout=output\n        )\n    except SystemExit:\n        pytest.fail(\"There are missing migrations:\\n %s\" % output.getvalue())\n# Without this settings patch, we get an error:\n#   (tg_utils.W001) EMAIL_HOST_PASSWORD setting is not set to proper value",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tests.test_django",
        "documentation": {}
    },
    {
        "label": "test_django_checks",
        "kind": 2,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tests.test_django",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tests.test_django",
        "peekOfCode": "def test_django_checks():\n    try:\n        call_command(\"check\", fail_level=\"WARNING\")\n    except SystemExit:\n        pytest.fail(\"Django system checks failed\")",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tests.test_django",
        "documentation": {}
    },
    {
        "label": "patch_celery",
        "kind": 2,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tests.test_health",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tests.test_health",
        "peekOfCode": "def patch_celery(mocker: MockerFixture):\n    cache.set(CACHE_KEY, datetime.now(), timeout=TIMEOUT * 2)\n    mocker.patch(\"health_check.contrib.celery.backends.CeleryHealthCheck.check_status\")\n    yield\n# - {%- endif %}\n@pytest.mark.django_db\ndef test_health_url(django_client: Client):\n    response = django_client.get(\"/{{ cookiecutter.django_health_check_path }}\")\n    assert response.status_code == 200\n    assert response.json() == {\"error\": False}",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tests.test_health",
        "documentation": {}
    },
    {
        "label": "test_health_url",
        "kind": 2,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tests.test_health",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tests.test_health",
        "peekOfCode": "def test_health_url(django_client: Client):\n    response = django_client.get(\"/{{ cookiecutter.django_health_check_path }}\")\n    assert response.status_code == 200\n    assert response.json() == {\"error\": False}\n@pytest.mark.django_db\ndef test_health_detail_no_token(django_client: Client):\n    response = django_client.get(\"/{{ cookiecutter.django_health_check_path }}/details\")\n    assert response.status_code == 403\n    response = django_client.get(\"/{{ cookiecutter.django_health_check_path }}/details?healthtoken=fake\")\n    assert response.status_code == 403",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tests.test_health",
        "documentation": {}
    },
    {
        "label": "test_health_detail_no_token",
        "kind": 2,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tests.test_health",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tests.test_health",
        "peekOfCode": "def test_health_detail_no_token(django_client: Client):\n    response = django_client.get(\"/{{ cookiecutter.django_health_check_path }}/details\")\n    assert response.status_code == 403\n    response = django_client.get(\"/{{ cookiecutter.django_health_check_path }}/details?healthtoken=fake\")\n    assert response.status_code == 403\n@pytest.mark.django_db\ndef test_health_detail(django_client: Client):\n    response = django_client.get(\n        \"/{{ cookiecutter.django_health_check_path }}/details?healthtoken={healthtoken}\".format(\n            healthtoken=settings.HEALTH_CHECK_ACCESS_TOKEN,",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tests.test_health",
        "documentation": {}
    },
    {
        "label": "test_health_detail",
        "kind": 2,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tests.test_health",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tests.test_health",
        "peekOfCode": "def test_health_detail(django_client: Client):\n    response = django_client.get(\n        \"/{{ cookiecutter.django_health_check_path }}/details?healthtoken={healthtoken}\".format(\n            healthtoken=settings.HEALTH_CHECK_ACCESS_TOKEN,\n        )\n    )\n    assert response.status_code == 200",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tests.test_health",
        "documentation": {}
    },
    {
        "label": "err_client",
        "kind": 2,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tests.test_views",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tests.test_views",
        "peekOfCode": "def err_client():\n    return Client(raise_request_exception=False)\ndef test_404_view_used(client):\n    response = client.get(\"/test_page\")\n    assert response.status_code == 404\n    assert \"404.html\" in [template.name for template in response.templates]\ndef test_404_view_unit(rf):\n    request = rf.get(\"/test_page\")\n    response = page_not_found(\n        request, exception=None, template_name=\"bad-template-file.html\"",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tests.test_views",
        "documentation": {}
    },
    {
        "label": "test_404_view_used",
        "kind": 2,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tests.test_views",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tests.test_views",
        "peekOfCode": "def test_404_view_used(client):\n    response = client.get(\"/test_page\")\n    assert response.status_code == 404\n    assert \"404.html\" in [template.name for template in response.templates]\ndef test_404_view_unit(rf):\n    request = rf.get(\"/test_page\")\n    response = page_not_found(\n        request, exception=None, template_name=\"bad-template-file.html\"\n    )\n    assert response.status_code == 404",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tests.test_views",
        "documentation": {}
    },
    {
        "label": "test_404_view_unit",
        "kind": 2,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tests.test_views",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tests.test_views",
        "peekOfCode": "def test_404_view_unit(rf):\n    request = rf.get(\"/test_page\")\n    response = page_not_found(\n        request, exception=None, template_name=\"bad-template-file.html\"\n    )\n    assert response.status_code == 404\n    assert b\"Not Found\" in response.content\ndef test_server_error(err_client):\n    with patch(\"{{ cookiecutter.repo_name }}.views.last_event_id\", return_value=40):\n        response = err_client.get(\"/test500\")",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tests.test_views",
        "documentation": {}
    },
    {
        "label": "test_server_error",
        "kind": 2,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tests.test_views",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tests.test_views",
        "peekOfCode": "def test_server_error(err_client):\n    with patch(\"{{ cookiecutter.repo_name }}.views.last_event_id\", return_value=40):\n        response = err_client.get(\"/test500\")\n        assert response.status_code == 500\n        assert \"500.html\" in [template.name for template in response.templates]\n        assert b\"Fault code: #40\" in response.content\ndef test_server_error_fallback_template(rf):\n    request = rf.get(\"/\")\n    response = server_error(request, \"non-existing-template.html\")\n    assert response.status_code == 500",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tests.test_views",
        "documentation": {}
    },
    {
        "label": "test_server_error_fallback_template",
        "kind": 2,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tests.test_views",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tests.test_views",
        "peekOfCode": "def test_server_error_fallback_template(rf):\n    request = rf.get(\"/\")\n    response = server_error(request, \"non-existing-template.html\")\n    assert response.status_code == 500\n    assert response.content == b\"<h1>Server Error (500)</h1>\"\n    assert response[\"Content-type\"] == \"text/html\"\n    with patch(\"{{ cookiecutter.repo_name }}.views.last_event_id\", return_value=40):\n        response = server_error(request, \"non-existing-template.html\")\n        assert response.status_code == 500\n        assert response.content == (",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tests.test_views",
        "documentation": {}
    },
    {
        "label": "test_server_error_json",
        "kind": 2,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tests.test_views",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tests.test_views",
        "peekOfCode": "def test_server_error_json(err_client):\n    with patch(\"{{ cookiecutter.repo_name }}.views.last_event_id\", return_value=40):\n        response = err_client.get(\"/test500\", HTTP_ACCEPT=\"application/json\")\n        assert response.status_code == 500\n        assert response.templates == []\n        assert response.json() == {\n            \"sentry\": 40,\n            \"error\": {\n                \"title\": \"Something went wrong\",\n            },",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tests.test_views",
        "documentation": {}
    },
    {
        "label": "admin.site.site_url",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.admin",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.admin",
        "peekOfCode": "admin.site.site_url = settings.SITE_URL",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.admin",
        "documentation": {}
    },
    {
        "label": "{{cookiecutter.repo_name|snake_to_pascal_case}}Config",
        "kind": 6,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.apps",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.apps",
        "peekOfCode": "class {{cookiecutter.repo_name|snake_to_pascal_case}}Config(AppConfig):\n    name = \"{{cookiecutter.repo_name}}\"\n    verbose_name = \"{{cookiecutter.project_title}}\"\n    def ready(self):\n        # Import and register the system checks\n        checks.register(check_production_settings)\n        checks.register(check_sentry_config)\n        # - {%- if cookiecutter.include_celery == YES %}\n        # Ensure default celery app is configured all the time\n        from .celery import app  # NOQA  # pylint: disable-all",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.apps",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.asgi",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.asgi",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.celery",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.celery",
        "peekOfCode": "app = Celery(\"{{cookiecutter.repo_name}}\")\n# Using a string here means the worker don't have to serialize the configuration object to child processes.\napp.config_from_object(\"{{cookiecutter.repo_name}}.celery_settings\")\n# Load task modules from all registered Django app configs.\napp.autodiscover_tasks(lambda: settings.INSTALLED_APPS)\n# make @shared_task work\napp.set_default()",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.celery",
        "documentation": {}
    },
    {
        "label": "worker_hijack_root_logger",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.celery_settings",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.celery_settings",
        "peekOfCode": "worker_hijack_root_logger = False\nbroker_url = settings.REDIS_CELERY_URL\nbroker_transport_options = {\"fanout_prefix\": True}\nresult_backend = settings.REDIS_CELERY_URL\ntimezone = \"UTC\"\nbeat_schedule = settings.CELERYBEAT_SCHEDULE",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.celery_settings",
        "documentation": {}
    },
    {
        "label": "broker_url",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.celery_settings",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.celery_settings",
        "peekOfCode": "broker_url = settings.REDIS_CELERY_URL\nbroker_transport_options = {\"fanout_prefix\": True}\nresult_backend = settings.REDIS_CELERY_URL\ntimezone = \"UTC\"\nbeat_schedule = settings.CELERYBEAT_SCHEDULE",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.celery_settings",
        "documentation": {}
    },
    {
        "label": "broker_transport_options",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.celery_settings",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.celery_settings",
        "peekOfCode": "broker_transport_options = {\"fanout_prefix\": True}\nresult_backend = settings.REDIS_CELERY_URL\ntimezone = \"UTC\"\nbeat_schedule = settings.CELERYBEAT_SCHEDULE",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.celery_settings",
        "documentation": {}
    },
    {
        "label": "result_backend",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.celery_settings",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.celery_settings",
        "peekOfCode": "result_backend = settings.REDIS_CELERY_URL\ntimezone = \"UTC\"\nbeat_schedule = settings.CELERYBEAT_SCHEDULE",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.celery_settings",
        "documentation": {}
    },
    {
        "label": "timezone",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.celery_settings",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.celery_settings",
        "peekOfCode": "timezone = \"UTC\"\nbeat_schedule = settings.CELERYBEAT_SCHEDULE",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.celery_settings",
        "documentation": {}
    },
    {
        "label": "beat_schedule",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.celery_settings",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.celery_settings",
        "peekOfCode": "beat_schedule = settings.CELERYBEAT_SCHEDULE",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.celery_settings",
        "documentation": {}
    },
    {
        "label": "PrivateMediaStorage",
        "kind": 6,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.storages",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.storages",
        "peekOfCode": "class PrivateMediaStorage(S3Boto3Storage):\n    \"\"\"Media storage which disables public access by default\n    When you use this as the default storage it makes sense to\n    turn off all public access to the bucket.\n# - {%- if cookiecutter.thorgate == YES %}\n    You can do this by changing the `s3_media_bucket_is_public` variable\n    in Terraform to false in the file {{cookiecutter.repo_name}}/utils/terraform/variables.tf\n# - {%- endif %}\n    \"\"\"\n    location = settings.MEDIAFILES_LOCATION",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.storages",
        "documentation": {}
    },
    {
        "label": "MediaStorage",
        "kind": 6,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.storages",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.storages",
        "peekOfCode": "class MediaStorage(S3Boto3Storage):\n    location = settings.MEDIAFILES_LOCATION\n    default_acl = \"public-read\"\n# - {%- endif %}{% if cookiecutter.django_media_engine == GCS %}\nfrom storages.backends.gcloud import GoogleCloudStorage\nclass PrivateMediaStorage(GoogleCloudStorage):\n    location = settings.MEDIAFILES_LOCATION\n    default_acl = \"private\"\nclass MediaStorage(GoogleCloudStorage):\n    location = settings.MEDIAFILES_LOCATION",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.storages",
        "documentation": {}
    },
    {
        "label": "PrivateMediaStorage",
        "kind": 6,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.storages",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.storages",
        "peekOfCode": "class PrivateMediaStorage(GoogleCloudStorage):\n    location = settings.MEDIAFILES_LOCATION\n    default_acl = \"private\"\nclass MediaStorage(GoogleCloudStorage):\n    location = settings.MEDIAFILES_LOCATION\n    default_acl = \"publicRead\"\n    # - {% endif %}",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.storages",
        "documentation": {}
    },
    {
        "label": "MediaStorage",
        "kind": 6,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.storages",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.storages",
        "peekOfCode": "class MediaStorage(GoogleCloudStorage):\n    location = settings.MEDIAFILES_LOCATION\n    default_acl = \"publicRead\"\n    # - {% endif %}",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.storages",
        "documentation": {}
    },
    {
        "label": "default_task",
        "kind": 2,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tasks",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tasks",
        "peekOfCode": "def default_task():\n    logger.info(\"This is a default Celery test task (no-op)\")\n@app.task\ndef cleanup_old_sessions():\n    clearsessions.Command().handle()\n    cursor = connection.cursor()\n    cursor.execute(\"VACUUM ANALYZE django_session\")",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tasks",
        "documentation": {}
    },
    {
        "label": "cleanup_old_sessions",
        "kind": 2,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tasks",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tasks",
        "peekOfCode": "def cleanup_old_sessions():\n    clearsessions.Command().handle()\n    cursor = connection.cursor()\n    cursor.execute(\"VACUUM ANALYZE django_session\")",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tasks",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tasks",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tasks",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@app.task\ndef default_task():\n    logger.info(\"This is a default Celery test task (no-op)\")\n@app.task\ndef cleanup_old_sessions():\n    clearsessions.Command().handle()\n    cursor = connection.cursor()\n    cursor.execute(\"VACUUM ANALYZE django_session\")",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.tasks",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.urls",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.urls",
        "peekOfCode": "urlpatterns = [\n    # - {%- if cookiecutter.frontend_style == WEBAPP %}\n    path(\"\", include(\"accounts.urls\")),\n    path(\"\", TemplateView.as_view(template_name=\"home.html\"), name=\"home\"),\n    path(\"jsi18n/\", JavaScriptCatalog.as_view(), name=\"javascript-catalog\"),\n    # - {% elif  cookiecutter.frontend_style == SPA %}\n    path(\"api/\", include(\"{{cookiecutter.repo_name}}.rest.urls\")),\n    # - {% endif %}\n    path(\"{{cookiecutter.django_admin_path}}/\", admin.site.urls),\n    *static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT),",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.urls",
        "documentation": {}
    },
    {
        "label": "page_not_found",
        "kind": 2,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.views",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.views",
        "peekOfCode": "def page_not_found(request, exception, template_name=\"404.html\"):\n    try:\n        context = {\n            \"request_path\": request.path,\n            \"error\": {\n                \"title\": _(\"Page not found\"),\n                \"message\": _(\"We tried but couldn't find this page, sorry.\"),\n            },\n        }\n        return render(request, template_name, context=context, status=404)",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.views",
        "documentation": {}
    },
    {
        "label": "server_error",
        "kind": 2,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.views",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.views",
        "peekOfCode": "def server_error(request, template_name=\"500.html\"):\n    if (\n        request.META.get('HTTP_X_REQUESTED_WITH') == 'XMLHttpRequest'\n        or request.META.get(\"HTTP_ACCEPT\", \"text/plain\") == \"application/json\"\n    ):\n        return JsonResponse(\n            {\n                \"sentry\": last_event_id(),\n                \"error\": {\n                    \"title\": _(\"Something went wrong\"),",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.wsgi",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.wsgi",
        "documentation": {}
    },
    {
        "label": "django_client",
        "kind": 2,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.conftest",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.conftest",
        "peekOfCode": "def django_client(client) -> Client:\n    return client\n@pytest.fixture\ndef user(django_user_model):\n    return baker.make(django_user_model, is_staff=False)\n@pytest.fixture\ndef other_user(django_user_model):\n    return baker.make(django_user_model, is_staff=False)\n@pytest.fixture\ndef admin(django_user_model):",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.conftest",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 2,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.conftest",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.conftest",
        "peekOfCode": "def user(django_user_model):\n    return baker.make(django_user_model, is_staff=False)\n@pytest.fixture\ndef other_user(django_user_model):\n    return baker.make(django_user_model, is_staff=False)\n@pytest.fixture\ndef admin(django_user_model):\n    return baker.make(django_user_model, is_staff=True)\n@pytest.fixture\ndef superuser(django_user_model):",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.conftest",
        "documentation": {}
    },
    {
        "label": "other_user",
        "kind": 2,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.conftest",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.conftest",
        "peekOfCode": "def other_user(django_user_model):\n    return baker.make(django_user_model, is_staff=False)\n@pytest.fixture\ndef admin(django_user_model):\n    return baker.make(django_user_model, is_staff=True)\n@pytest.fixture\ndef superuser(django_user_model):\n    return baker.make(django_user_model, is_staff=True, is_superuser=True)",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.conftest",
        "documentation": {}
    },
    {
        "label": "admin",
        "kind": 2,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.conftest",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.conftest",
        "peekOfCode": "def admin(django_user_model):\n    return baker.make(django_user_model, is_staff=True)\n@pytest.fixture\ndef superuser(django_user_model):\n    return baker.make(django_user_model, is_staff=True, is_superuser=True)",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.conftest",
        "documentation": {}
    },
    {
        "label": "superuser",
        "kind": 2,
        "importPath": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.conftest",
        "description": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.conftest",
        "peekOfCode": "def superuser(django_user_model):\n    return baker.make(django_user_model, is_staff=True, is_superuser=True)",
        "detail": "{{cookiecutter.repo_name}}.{{cookiecutter.repo_name}}.conftest",
        "documentation": {}
    },
    {
        "label": "Git",
        "kind": 6,
        "importPath": "upgrade-template",
        "description": "upgrade-template",
        "peekOfCode": "class Git:\n    def get_version(self, repo_path):\n        cmd = 'cd {path} && git rev-parse HEAD'.format(path=repo_path)\n        return get_stdout_lines(cmd)[0]\n    def local_branch(self, repo_path):\n        cmd = 'cd {path} && git rev-parse --abbrev-ref @'.format(path=repo_path)\n        return get_stdout_lines(cmd)[0]\n    def get_commit_details(self, commit_id, repo_path):\n        sep = ':|:|:'\n        return subprocess.check_output([",
        "detail": "upgrade-template",
        "documentation": {}
    },
    {
        "label": "Mercurial",
        "kind": 6,
        "importPath": "upgrade-template",
        "description": "upgrade-template",
        "peekOfCode": "class Mercurial:\n    def get_version(self, repo_path):\n        cmd = 'cd {path} && hg id -i'.format(path=repo_path)\n        return get_stdout_lines(cmd)[0]\n    def local_branch(self, repo_path):\n        cmd = 'cd {path} && hg id -b'.format(path=repo_path)\n        return get_stdout_lines(cmd)[0]\n    def get_commit_details(self, commit_id, repo_path):\n        sep = ':|:|:'\n        return subprocess.check_output([",
        "detail": "upgrade-template",
        "documentation": {}
    },
    {
        "label": "get_codemods",
        "kind": 2,
        "importPath": "upgrade-template",
        "description": "upgrade-template",
        "peekOfCode": "def get_codemods(context):\n    frontend_style = context['cookiecutter']['frontend_style']\n    codemods = []\n    if frontend_style == SPA:\n        codemods.append('settings-default-export')\n        codemods.append('react-helmet-async-import')\n        codemods.append('tg-named-routes-resolve-path')\n    return codemods\ndef load_context(path):\n    if not exists(path):",
        "detail": "upgrade-template",
        "documentation": {}
    },
    {
        "label": "load_context",
        "kind": 2,
        "importPath": "upgrade-template",
        "description": "upgrade-template",
        "peekOfCode": "def load_context(path):\n    if not exists(path):\n        return None\n    with open(path, 'r') as infile:\n        context = json.load(infile)\n    return context\ndef dump_context(path, context):\n    with open(path, 'w') as outfile:\n        json.dump(context, outfile, sort_keys=True, indent=4)\ndef get_or_create_context(template_context_path, context_path, template_path, update_params):",
        "detail": "upgrade-template",
        "documentation": {}
    },
    {
        "label": "dump_context",
        "kind": 2,
        "importPath": "upgrade-template",
        "description": "upgrade-template",
        "peekOfCode": "def dump_context(path, context):\n    with open(path, 'w') as outfile:\n        json.dump(context, outfile, sort_keys=True, indent=4)\ndef get_or_create_context(template_context_path, context_path, template_path, update_params):\n    template_context = generate_context(context_file=template_context_path)\n    ask_config = not exists(context_path)\n    context = None  # not necessary but PyCharm likes to complain\n    if not ask_config:\n        context = load_context(context_path)\n        if 'cookiecutter' not in context:",
        "detail": "upgrade-template",
        "documentation": {}
    },
    {
        "label": "get_or_create_context",
        "kind": 2,
        "importPath": "upgrade-template",
        "description": "upgrade-template",
        "peekOfCode": "def get_or_create_context(template_context_path, context_path, template_path, update_params):\n    template_context = generate_context(context_file=template_context_path)\n    ask_config = not exists(context_path)\n    context = None  # not necessary but PyCharm likes to complain\n    if not ask_config:\n        context = load_context(context_path)\n        if 'cookiecutter' not in context:\n            print('Invalid context file, regenerating')\n            ask_config = True\n        template_keys = set(template_context['cookiecutter'].keys())",
        "detail": "upgrade-template",
        "documentation": {}
    },
    {
        "label": "get_stdout_lines",
        "kind": 2,
        "importPath": "upgrade-template",
        "description": "upgrade-template",
        "peekOfCode": "def get_stdout_lines(cmd):\n    output = subprocess.check_output(cmd, stderr=subprocess.STDOUT, shell=True).decode().split('\\n')\n    output = [line.strip() for line in output]\n    return output\nclass Git:\n    def get_version(self, repo_path):\n        cmd = 'cd {path} && git rev-parse HEAD'.format(path=repo_path)\n        return get_stdout_lines(cmd)[0]\n    def local_branch(self, repo_path):\n        cmd = 'cd {path} && git rev-parse --abbrev-ref @'.format(path=repo_path)",
        "detail": "upgrade-template",
        "documentation": {}
    },
    {
        "label": "get_vcs",
        "kind": 2,
        "importPath": "upgrade-template",
        "description": "upgrade-template",
        "peekOfCode": "def get_vcs(path):\n    if isdir(join(path, '.git')):\n        return Git()\n    elif isdir(join(path, '.hg')):\n        return Mercurial()\n    return None\ndef update_template(path, template_path, tmp_dir, update_params=False):\n    vcs = get_vcs(path)\n    assert vcs, \"Couldn't detect VCS in \\\"{}\\\", are you sure you have the right path?\".format(path)\n    template_vcs = get_vcs(template_path)",
        "detail": "upgrade-template",
        "documentation": {}
    },
    {
        "label": "update_template",
        "kind": 2,
        "importPath": "upgrade-template",
        "description": "upgrade-template",
        "peekOfCode": "def update_template(path, template_path, tmp_dir, update_params=False):\n    vcs = get_vcs(path)\n    assert vcs, \"Couldn't detect VCS in \\\"{}\\\", are you sure you have the right path?\".format(path)\n    template_vcs = get_vcs(template_path)\n    template_version = template_vcs.get_version(template_path) if template_vcs else None\n    # find or create cookiecutter context\n    template_context_path = join(template_path, 'cookiecutter.json')\n    context_path = join(path, '.cookiecutterrc')\n    # prompt if necessary\n    context, created = get_or_create_context(template_context_path, context_path, template_path, update_params)",
        "detail": "upgrade-template",
        "documentation": {}
    },
    {
        "label": "apply_frontend_codemod",
        "kind": 2,
        "importPath": "upgrade-template",
        "description": "upgrade-template",
        "peekOfCode": "def apply_frontend_codemod(client, codemod, path):\n    container = client.containers.run(\n        \"django-project-template-frontend-codemods\",\n        f\"yarn transform -t {codemod}.ts /src\",\n        volumes={\n            path: {'bind': '/src', 'mode': 'rw'},\n        },\n        remove=True,\n        detach=True,\n    )",
        "detail": "upgrade-template",
        "documentation": {}
    },
    {
        "label": "apply_frontend_codemods",
        "kind": 2,
        "importPath": "upgrade-template",
        "description": "upgrade-template",
        "peekOfCode": "def apply_frontend_codemods(path, template_path):\n    client = docker.from_env()\n    client.images.build(\n        path=join(template_path, 'codemods', 'frontend'),\n        tag=\"django-project-template-frontend-codemods\",\n        rm=True,\n    )\n    context_path = join(path, '.cookiecutterrc')\n    context = load_context(context_path)\n    frontend_style = context['cookiecutter']['frontend_style']",
        "detail": "upgrade-template",
        "documentation": {}
    },
    {
        "label": "WEBAPP",
        "kind": 5,
        "importPath": "upgrade-template",
        "description": "upgrade-template",
        "peekOfCode": "WEBAPP = \"webapp\"\nSPA = \"spa\"\ndef get_codemods(context):\n    frontend_style = context['cookiecutter']['frontend_style']\n    codemods = []\n    if frontend_style == SPA:\n        codemods.append('settings-default-export')\n        codemods.append('react-helmet-async-import')\n        codemods.append('tg-named-routes-resolve-path')\n    return codemods",
        "detail": "upgrade-template",
        "documentation": {}
    },
    {
        "label": "SPA",
        "kind": 5,
        "importPath": "upgrade-template",
        "description": "upgrade-template",
        "peekOfCode": "SPA = \"spa\"\ndef get_codemods(context):\n    frontend_style = context['cookiecutter']['frontend_style']\n    codemods = []\n    if frontend_style == SPA:\n        codemods.append('settings-default-export')\n        codemods.append('react-helmet-async-import')\n        codemods.append('tg-named-routes-resolve-path')\n    return codemods\ndef load_context(path):",
        "detail": "upgrade-template",
        "documentation": {}
    }
]