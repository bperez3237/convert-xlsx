[
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "GenericForeignKey",
        "importPath": "django.contrib.contenttypes.fields",
        "description": "django.contrib.contenttypes.fields",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.fields",
        "documentation": {}
    },
    {
        "label": "ContentType",
        "importPath": "django.contrib.contenttypes.models",
        "description": "django.contrib.contenttypes.models",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.models",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpRequest",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HTTP_200_OK",
        "importPath": "rest_framework.status",
        "description": "rest_framework.status",
        "isExtraImport": true,
        "detail": "rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_200_OK",
        "importPath": "rest_framework.status",
        "description": "rest_framework.status",
        "isExtraImport": true,
        "detail": "rest_framework.status",
        "documentation": {}
    },
    {
        "label": "xlsxwriter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xlsxwriter",
        "description": "xlsxwriter",
        "detail": "xlsxwriter",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "routers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "GenericViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "ListModelMixin",
        "importPath": "rest_framework.mixins",
        "description": "rest_framework.mixins",
        "isExtraImport": true,
        "detail": "rest_framework.mixins",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "management",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "ZipFile",
        "importPath": "zipfile",
        "description": "zipfile",
        "isExtraImport": true,
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "BadZipfile",
        "importPath": "zipfile",
        "description": "zipfile",
        "isExtraImport": true,
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.api.migrations.0001_initial",
        "description": "server.api.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('username', models.CharField(max_length=50)),",
        "detail": "server.api.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "ApiConfig",
        "kind": 6,
        "importPath": "server.api.apps",
        "description": "server.api.apps",
        "peekOfCode": "class ApiConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'api'",
        "detail": "server.api.apps",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "server.api.models",
        "description": "server.api.models",
        "peekOfCode": "class User(models.Model):\n    username = models.CharField(max_length=50)\n    password = models.CharField(max_length=50)\n    email = models.CharField(max_length=50)",
        "detail": "server.api.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.api.urls",
        "description": "server.api.urls",
        "peekOfCode": "urlpatterns = [\n    path('upload/', csrf_exempt(views.index)),\n    path('test/', views.test)\n]",
        "detail": "server.api.urls",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "server.api.views",
        "description": "server.api.views",
        "peekOfCode": "def index(request):\n    print('starting index request')\n    # print(request.FILES)\n    if \"POST\" == request.method and request.FILES:\n        excel_file = request.FILES['file']\n        sheet = pd.read_excel(excel_file)\n        print(sheet)\n        output = io.BytesIO()\n        # you may put validations here to check extension or file size\n        workbook = xlsxwriter.Workbook(output)",
        "detail": "server.api.views",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "server.api.views",
        "description": "server.api.views",
        "peekOfCode": "def test(request):\n    print('j')\n    return JsonResponse({'message': 'testing'})",
        "detail": "server.api.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "server.public.migrations.0001_initial",
        "description": "server.public.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n    ]\n    operations = [\n        migrations.RunPython(create_user)\n    ]",
        "detail": "server.public.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "server.public.migrations.0001_initial",
        "description": "server.public.migrations.0001_initial",
        "peekOfCode": "def create_user(apps, schema_editor):\n    User.objects.create_superuser(\"test\", password=\"test\")\nclass Migration(migrations.Migration):\n    dependencies = [\n    ]\n    operations = [\n        migrations.RunPython(create_user)\n    ]",
        "detail": "server.public.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "PublicConfig",
        "kind": 6,
        "importPath": "server.public.apps",
        "description": "server.public.apps",
        "peekOfCode": "class PublicConfig(AppConfig):\n    name = 'public'",
        "detail": "server.public.apps",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "server.public.urls",
        "description": "server.public.urls",
        "peekOfCode": "router = routers.DefaultRouter()\nrouter.register('ping', views.PingViewSet, basename=\"ping\")\nurlpatterns = [\n    path('api/token/access/', TokenRefreshView.as_view(), name='token_get_access'),\n    path('api/token/both/', TokenObtainPairView.as_view(), name='token_obtain_pair'),\n    path('api/', include(router.urls))\n]\n\"\"\"\n- For the first view, you send the refresh token to get a new access token.\n- For the second view, you send the client credentials (username and password)",
        "detail": "server.public.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.public.urls",
        "description": "server.public.urls",
        "peekOfCode": "urlpatterns = [\n    path('api/token/access/', TokenRefreshView.as_view(), name='token_get_access'),\n    path('api/token/both/', TokenObtainPairView.as_view(), name='token_obtain_pair'),\n    path('api/', include(router.urls))\n]\n\"\"\"\n- For the first view, you send the refresh token to get a new access token.\n- For the second view, you send the client credentials (username and password)\n  to get BOTH a new access and refresh token.\n\"\"\"",
        "detail": "server.public.urls",
        "documentation": {}
    },
    {
        "label": "PingViewSet",
        "kind": 6,
        "importPath": "server.public.views",
        "description": "server.public.views",
        "peekOfCode": "class PingViewSet(GenericViewSet, ListModelMixin):\n    \"\"\"\n    Helpful class for internal health checks\n    for when your server deploys. Typical of AWS\n    applications behind ALB which does default 30\n    second ping/health checks.\n    \"\"\"\n    permission_classes = [IsAuthenticated]\n    def list(self, request, *args, **kwargs):\n        return Response(",
        "detail": "server.public.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "server.server.asgi",
        "description": "server.server.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "server.server.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "server.server.settings",
        "description": "server.server.settings",
        "peekOfCode": "BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = '3hls$)92@wy0z^lq67@w1a(qzx4*$)pj)_*1$m!h$k#dl(odq&'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n# The last one is my private IP address for Android development\nALLOWED_HOSTS = [\"127.0.0.1\", \"localhost\", \"192.168.0.12\"]\n# IMPORTANT STUFF\n# IMPORTANT STUFF\n# IMPORTANT STUFF",
        "detail": "server.server.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "server.server.settings",
        "description": "server.server.settings",
        "peekOfCode": "SECRET_KEY = '3hls$)92@wy0z^lq67@w1a(qzx4*$)pj)_*1$m!h$k#dl(odq&'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n# The last one is my private IP address for Android development\nALLOWED_HOSTS = [\"127.0.0.1\", \"localhost\", \"192.168.0.12\"]\n# IMPORTANT STUFF\n# IMPORTANT STUFF\n# IMPORTANT STUFF\n# IMPORTANT STUFF\n# IMPORTANT STUFF",
        "detail": "server.server.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "server.server.settings",
        "description": "server.server.settings",
        "peekOfCode": "DEBUG = True\n# The last one is my private IP address for Android development\nALLOWED_HOSTS = [\"127.0.0.1\", \"localhost\", \"192.168.0.12\"]\n# IMPORTANT STUFF\n# IMPORTANT STUFF\n# IMPORTANT STUFF\n# IMPORTANT STUFF\n# IMPORTANT STUFF\n# IMPORTANT STUFF\n# IMPORTANT STUFF",
        "detail": "server.server.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "server.server.settings",
        "description": "server.server.settings",
        "peekOfCode": "ALLOWED_HOSTS = [\"127.0.0.1\", \"localhost\", \"192.168.0.12\"]\n# IMPORTANT STUFF\n# IMPORTANT STUFF\n# IMPORTANT STUFF\n# IMPORTANT STUFF\n# IMPORTANT STUFF\n# IMPORTANT STUFF\n# IMPORTANT STUFF\n# IMPORTANT STUFF\nINSTALLED_APPS = [",
        "detail": "server.server.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "server.server.settings",
        "description": "server.server.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'rest_framework_simplejwt.token_blacklist',\n    'public',",
        "detail": "server.server.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "server.server.settings",
        "description": "server.server.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    )\n}\nfrom datetime import timedelta\nSIMPLE_JWT_SIGNING_KEY = \"b=72^ado*%1(v3r7rga9ch)03xr=d*f)lroz94kosf!61((9=i\"\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(seconds=10),\n    'REFRESH_TOKEN_LIFETIME': timedelta(seconds=30),",
        "detail": "server.server.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT_SIGNING_KEY",
        "kind": 5,
        "importPath": "server.server.settings",
        "description": "server.server.settings",
        "peekOfCode": "SIMPLE_JWT_SIGNING_KEY = \"b=72^ado*%1(v3r7rga9ch)03xr=d*f)lroz94kosf!61((9=i\"\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(seconds=10),\n    'REFRESH_TOKEN_LIFETIME': timedelta(seconds=30),\n    'ROTATE_REFRESH_TOKENS': False,\n    'BLACKLIST_AFTER_ROTATION': True,\n    'ALGORITHM': 'HS256',\n    'SIGNING_KEY': SIMPLE_JWT_SIGNING_KEY,\n    'VERIFYING_KEY': None,\n    'AUDIENCE': None,",
        "detail": "server.server.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "server.server.settings",
        "description": "server.server.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(seconds=10),\n    'REFRESH_TOKEN_LIFETIME': timedelta(seconds=30),\n    'ROTATE_REFRESH_TOKENS': False,\n    'BLACKLIST_AFTER_ROTATION': True,\n    'ALGORITHM': 'HS256',\n    'SIGNING_KEY': SIMPLE_JWT_SIGNING_KEY,\n    'VERIFYING_KEY': None,\n    'AUDIENCE': None,\n    'ISSUER': None,",
        "detail": "server.server.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "server.server.settings",
        "description": "server.server.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "server.server.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "server.server.settings",
        "description": "server.server.settings",
        "peekOfCode": "ROOT_URLCONF = 'server.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "server.server.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "server.server.settings",
        "description": "server.server.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "server.server.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "server.server.settings",
        "description": "server.server.settings",
        "peekOfCode": "WSGI_APPLICATION = 'server.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n# Password validation",
        "detail": "server.server.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "server.server.settings",
        "description": "server.server.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "server.server.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "server.server.settings",
        "description": "server.server.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "server.server.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "server.server.settings",
        "description": "server.server.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSTATIC_URL = '/static/'\n# Cors Settings\nCORS_ALLOW_CREDENTIALS = True",
        "detail": "server.server.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "server.server.settings",
        "description": "server.server.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSTATIC_URL = '/static/'\n# Cors Settings\nCORS_ALLOW_CREDENTIALS = True\n# NOTE:",
        "detail": "server.server.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "server.server.settings",
        "description": "server.server.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSTATIC_URL = '/static/'\n# Cors Settings\nCORS_ALLOW_CREDENTIALS = True\n# NOTE:\n# change 'https://example-prod-react.com' to your frontend domain",
        "detail": "server.server.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "server.server.settings",
        "description": "server.server.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSTATIC_URL = '/static/'\n# Cors Settings\nCORS_ALLOW_CREDENTIALS = True\n# NOTE:\n# change 'https://example-prod-react.com' to your frontend domain\nCORS_ORIGIN_WHITELIST = ['http://localhost:3000', 'https://example-prod-react.com']",
        "detail": "server.server.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "server.server.settings",
        "description": "server.server.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSTATIC_URL = '/static/'\n# Cors Settings\nCORS_ALLOW_CREDENTIALS = True\n# NOTE:\n# change 'https://example-prod-react.com' to your frontend domain\nCORS_ORIGIN_WHITELIST = ['http://localhost:3000', 'https://example-prod-react.com']",
        "detail": "server.server.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "server.server.settings",
        "description": "server.server.settings",
        "peekOfCode": "STATIC_URL = '/static/'\n# Cors Settings\nCORS_ALLOW_CREDENTIALS = True\n# NOTE:\n# change 'https://example-prod-react.com' to your frontend domain\nCORS_ORIGIN_WHITELIST = ['http://localhost:3000', 'https://example-prod-react.com']",
        "detail": "server.server.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_CREDENTIALS",
        "kind": 5,
        "importPath": "server.server.settings",
        "description": "server.server.settings",
        "peekOfCode": "CORS_ALLOW_CREDENTIALS = True\n# NOTE:\n# change 'https://example-prod-react.com' to your frontend domain\nCORS_ORIGIN_WHITELIST = ['http://localhost:3000', 'https://example-prod-react.com']",
        "detail": "server.server.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ORIGIN_WHITELIST",
        "kind": 5,
        "importPath": "server.server.settings",
        "description": "server.server.settings",
        "peekOfCode": "CORS_ORIGIN_WHITELIST = ['http://localhost:3000', 'https://example-prod-react.com']",
        "detail": "server.server.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.server.urls",
        "description": "server.server.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('public/', include('public.urls')),\n    path('api/', include('api.urls')),\n]",
        "detail": "server.server.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "server.server.wsgi",
        "description": "server.server.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "server.server.wsgi",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "server.venv.bin.activate_this",
        "description": "server.venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "server.venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "server.venv.bin.activate_this",
        "description": "server.venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]",
        "detail": "server.venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "server.venv.bin.activate_this",
        "description": "server.venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "server.venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "server.venv.bin.activate_this",
        "description": "server.venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "server.venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "server.venv.bin.activate_this",
        "description": "server.venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "server.venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "server.venv.bin.activate_this",
        "description": "server.venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "server.venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "server.venv.bin.activate_this",
        "description": "server.venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "server.venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "server.venv.bin.activate_this",
        "description": "server.venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "server.venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "vba_filename",
        "kind": 5,
        "importPath": "server.venv.bin.vba_extract",
        "description": "server.venv.bin.vba_extract",
        "peekOfCode": "vba_filename = 'vbaProject.bin'\n# Get the xlsm file name from the commandline.\nif len(sys.argv) > 1:\n    xlsm_file = sys.argv[1]\nelse:\n    print(\"\\nUtility to extract a vbaProject.bin binary from an Excel 2007+ \"\n          \"xlsm macro file for insertion into an XlsxWriter file.\"\n          \"\\n\"\n          \"See: https://xlsxwriter.readthedocs.io/working_with_macros.html\\n\"\n          \"\\n\"",
        "detail": "server.venv.bin.vba_extract",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "server.manage",
        "description": "server.manage",
        "peekOfCode": "def main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'server.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc",
        "detail": "server.manage",
        "documentation": {}
    }
]